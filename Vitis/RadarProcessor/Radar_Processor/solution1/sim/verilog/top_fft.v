// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_fft (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_M_real_address0,
        a_M_real_ce0,
        a_M_real_q0,
        a_M_imag_address0,
        a_M_imag_ce0,
        a_M_imag_q0,
        out_M_real_address0,
        out_M_real_ce0,
        out_M_real_we0,
        out_M_real_d0,
        out_M_imag_address0,
        out_M_imag_ce0,
        out_M_imag_we0,
        out_M_imag_d0,
        grp_fu_1130_p_din0,
        grp_fu_1130_p_din1,
        grp_fu_1130_p_dout0,
        grp_fu_1130_p_ce,
        grp_fu_1134_p_din0,
        grp_fu_1134_p_din1,
        grp_fu_1134_p_dout0,
        grp_fu_1134_p_ce,
        grp_fu_1146_p_din0,
        grp_fu_1146_p_din1,
        grp_fu_1146_p_dout0,
        grp_fu_1146_p_ce,
        grp_fu_1150_p_din0,
        grp_fu_1150_p_din1,
        grp_fu_1150_p_dout0,
        grp_fu_1150_p_ce
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state11 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] a_M_real_address0;
output   a_M_real_ce0;
input  [31:0] a_M_real_q0;
output  [13:0] a_M_imag_address0;
output   a_M_imag_ce0;
input  [31:0] a_M_imag_q0;
output  [13:0] out_M_real_address0;
output   out_M_real_ce0;
output   out_M_real_we0;
output  [31:0] out_M_real_d0;
output  [13:0] out_M_imag_address0;
output   out_M_imag_ce0;
output   out_M_imag_we0;
output  [31:0] out_M_imag_d0;
output  [9:0] grp_fu_1130_p_din0;
output  [31:0] grp_fu_1130_p_din1;
input  [39:0] grp_fu_1130_p_dout0;
output   grp_fu_1130_p_ce;
output  [9:0] grp_fu_1134_p_din0;
output  [31:0] grp_fu_1134_p_din1;
input  [39:0] grp_fu_1134_p_dout0;
output   grp_fu_1134_p_ce;
output  [9:0] grp_fu_1146_p_din0;
output  [31:0] grp_fu_1146_p_din1;
input  [39:0] grp_fu_1146_p_dout0;
output   grp_fu_1146_p_ce;
output  [9:0] grp_fu_1150_p_din0;
output  [31:0] grp_fu_1150_p_din1;
input  [39:0] grp_fu_1150_p_dout0;
output   grp_fu_1150_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_M_real_ce0;
reg a_M_imag_ce0;
reg out_M_real_ce0;
reg out_M_real_we0;
reg out_M_imag_ce0;
reg out_M_imag_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] fft_coeff_M_real_V_address0;
reg    fft_coeff_M_real_V_ce0;
wire   [9:0] fft_coeff_M_real_V_q0;
wire   [10:0] fft_coeff_M_imag_V_address0;
reg    fft_coeff_M_imag_V_ce0;
wire   [9:0] fft_coeff_M_imag_V_q0;
reg   [18:0] indvar_flatten19_reg_164;
reg   [11:0] indvar_flatten_reg_175;
reg   [5:0] j_reg_186;
reg   [5:0] k_reg_197;
reg   [8:0] i_reg_208;
wire   [18:0] add_ln117_1_fu_229_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln117_fu_235_p2;
reg   [0:0] icmp_ln117_reg_525;
reg   [0:0] icmp_ln117_reg_525_pp0_iter1_reg;
reg   [0:0] icmp_ln117_reg_525_pp0_iter2_reg;
reg   [0:0] icmp_ln117_reg_525_pp0_iter3_reg;
reg   [0:0] icmp_ln117_reg_525_pp0_iter4_reg;
reg   [0:0] icmp_ln117_reg_525_pp0_iter5_reg;
reg   [0:0] icmp_ln117_reg_525_pp0_iter6_reg;
wire   [0:0] icmp_ln118_fu_241_p2;
reg   [0:0] icmp_ln118_reg_529;
reg   [0:0] icmp_ln118_reg_529_pp0_iter1_reg;
wire   [5:0] select_ln118_fu_285_p3;
reg   [5:0] select_ln118_reg_534;
reg   [5:0] select_ln118_reg_534_pp0_iter1_reg;
reg   [5:0] select_ln118_reg_534_pp0_iter2_reg;
wire   [5:0] select_ln118_1_fu_293_p3;
reg   [5:0] select_ln118_1_reg_540;
reg   [5:0] select_ln118_1_reg_540_pp0_iter1_reg;
reg   [5:0] select_ln118_1_reg_540_pp0_iter2_reg;
reg   [5:0] select_ln118_1_reg_540_pp0_iter3_reg;
reg   [5:0] select_ln118_1_reg_540_pp0_iter4_reg;
reg   [5:0] select_ln118_1_reg_540_pp0_iter5_reg;
reg   [5:0] select_ln118_1_reg_540_pp0_iter6_reg;
reg   [5:0] select_ln118_1_reg_540_pp0_iter7_reg;
wire   [0:0] icmp_ln122_fu_305_p2;
reg   [0:0] icmp_ln122_reg_551;
reg   [0:0] icmp_ln122_reg_551_pp0_iter1_reg;
reg   [0:0] icmp_ln122_reg_551_pp0_iter2_reg;
reg   [0:0] icmp_ln122_reg_551_pp0_iter3_reg;
reg   [0:0] icmp_ln122_reg_551_pp0_iter4_reg;
reg   [0:0] icmp_ln122_reg_551_pp0_iter5_reg;
reg   [0:0] icmp_ln122_reg_551_pp0_iter6_reg;
reg   [0:0] icmp_ln122_reg_551_pp0_iter7_reg;
wire   [5:0] add_ln119_fu_311_p2;
wire   [11:0] select_ln118_2_fu_323_p3;
wire   [8:0] select_ln117_1_fu_337_p3;
reg   [8:0] select_ln117_1_reg_565;
reg    ap_enable_reg_pp0_iter2;
wire   [13:0] add_ln121_fu_365_p2;
reg   [13:0] add_ln121_reg_577;
reg   [13:0] add_ln121_reg_577_pp0_iter4_reg;
reg   [13:0] add_ln121_reg_577_pp0_iter5_reg;
reg   [13:0] add_ln121_reg_577_pp0_iter6_reg;
reg   [13:0] add_ln121_reg_577_pp0_iter7_reg;
reg   [31:0] r_V_reg_602;
reg   [31:0] r_V_4_reg_607;
reg   [9:0] fft_coeff_M_real_V_load_reg_612;
reg   [9:0] fft_coeff_M_imag_V_load_reg_617;
wire  signed [39:0] sext_ln1118_fu_391_p1;
wire  signed [39:0] sext_ln1118_7_fu_394_p1;
wire  signed [39:0] sext_ln1118_8_fu_397_p1;
wire  signed [39:0] sext_ln1118_9_fu_400_p1;
wire   [39:0] grp_fu_403_p2;
reg   [39:0] mul_ln703_reg_646;
wire   [39:0] grp_fu_409_p2;
reg   [39:0] mul_ln1193_reg_651;
wire   [39:0] grp_fu_415_p2;
reg   [39:0] mul_ln703_2_reg_656;
wire   [39:0] grp_fu_421_p2;
reg   [39:0] mul_ln1192_reg_661;
wire   [31:0] sum_M_real_V_4_fu_461_p2;
reg   [31:0] sum_M_real_V_4_reg_666;
wire   [31:0] sum_M_imag_V_4_fu_467_p2;
reg   [31:0] sum_M_imag_V_4_reg_671;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter3;
reg    ap_condition_pp0_exit_iter2_state4;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg   [5:0] ap_phi_mux_j_phi_fu_190_p4;
wire    ap_block_pp0_stage0;
reg   [8:0] ap_phi_mux_i_phi_fu_212_p4;
wire   [63:0] zext_ln1118_5_fu_374_p1;
wire   [63:0] zext_ln121_1_fu_385_p1;
wire   [63:0] p_cast_fu_491_p1;
reg   [31:0] sum_M_real_V_fu_78;
reg   [31:0] sum_M_imag_V_fu_82;
wire   [0:0] icmp_ln119_fu_261_p2;
wire   [0:0] xor_ln117_fu_255_p2;
wire   [5:0] select_ln117_fu_247_p3;
wire   [0:0] and_ln117_fu_267_p2;
wire   [0:0] or_ln118_fu_279_p2;
wire   [5:0] add_ln118_fu_273_p2;
wire   [11:0] add_ln118_1_fu_317_p2;
wire   [8:0] add_ln117_fu_331_p2;
wire   [11:0] tmp_s_fu_354_p3;
wire   [13:0] tmp_fu_347_p3;
wire   [13:0] zext_ln121_fu_361_p1;
wire   [10:0] grp_fu_497_p3;
wire   [13:0] zext_ln1118_3_fu_371_p1;
wire   [13:0] add_ln121_1_fu_379_p2;
wire  signed [9:0] grp_fu_403_p0;
wire  signed [31:0] grp_fu_403_p1;
wire  signed [9:0] grp_fu_409_p0;
wire  signed [31:0] grp_fu_409_p1;
wire  signed [9:0] grp_fu_415_p0;
wire  signed [31:0] grp_fu_415_p1;
wire  signed [9:0] grp_fu_421_p0;
wire  signed [31:0] grp_fu_421_p1;
wire   [39:0] ret_V_fu_433_p2;
wire   [39:0] ret_V_2_fu_447_p2;
wire   [31:0] p_r_V_fu_437_p4;
wire   [31:0] trunc_ln_fu_451_p4;
wire   [13:0] zext_ln1118_fu_483_p1;
wire   [13:0] empty_28_fu_486_p2;
wire   [5:0] grp_fu_497_p0;
wire   [6:0] grp_fu_497_p1;
wire   [5:0] grp_fu_497_p2;
wire    grp_fu_403_ce;
wire    grp_fu_409_ce;
wire    grp_fu_415_ce;
wire    grp_fu_421_ce;
wire    ap_CS_fsm_state11;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [10:0] grp_fu_497_p00;
wire   [10:0] grp_fu_497_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
end

top_fft_fft_coeff_M_real_V #(
    .DataWidth( 10 ),
    .AddressRange( 1521 ),
    .AddressWidth( 11 ))
fft_coeff_M_real_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fft_coeff_M_real_V_address0),
    .ce0(fft_coeff_M_real_V_ce0),
    .q0(fft_coeff_M_real_V_q0)
);

top_fft_fft_coeff_M_imag_V #(
    .DataWidth( 10 ),
    .AddressRange( 1521 ),
    .AddressWidth( 11 ))
fft_coeff_M_imag_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fft_coeff_M_imag_V_address0),
    .ce0(fft_coeff_M_imag_V_ce0),
    .q0(fft_coeff_M_imag_V_q0)
);

top_mac_muladd_6ns_7ns_6ns_11_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 11 ))
mac_muladd_6ns_7ns_6ns_11_4_1_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_497_p0),
    .din1(grp_fu_497_p1),
    .din2(grp_fu_497_p2),
    .ce(1'b1),
    .dout(grp_fu_497_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter2_state4)) begin
                ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln117_reg_525_pp0_iter2_reg == 1'd0))) begin
        i_reg_208 <= select_ln117_1_reg_565;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_208 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln117_fu_235_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten19_reg_164 <= add_ln117_1_fu_229_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten19_reg_164 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln117_fu_235_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_175 <= select_ln118_2_fu_323_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_175 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln117_reg_525 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_186 <= select_ln118_1_reg_540;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_186 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln117_fu_235_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_reg_197 <= add_ln119_fu_311_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_197 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln122_reg_551_pp0_iter6_reg == 1'd1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        sum_M_imag_V_fu_82 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln122_reg_551_pp0_iter6_reg == 1'd0))) begin
        sum_M_imag_V_fu_82 <= sum_M_imag_V_4_fu_467_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln122_reg_551_pp0_iter6_reg == 1'd1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        sum_M_real_V_fu_78 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln122_reg_551_pp0_iter6_reg == 1'd0))) begin
        sum_M_real_V_fu_78 <= sum_M_real_V_4_fu_461_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln117_reg_525_pp0_iter2_reg == 1'd0))) begin
        add_ln121_reg_577[13 : 3] <= add_ln121_fu_365_p2[13 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln121_reg_577_pp0_iter4_reg[13 : 3] <= add_ln121_reg_577[13 : 3];
        add_ln121_reg_577_pp0_iter5_reg[13 : 3] <= add_ln121_reg_577_pp0_iter4_reg[13 : 3];
        add_ln121_reg_577_pp0_iter6_reg[13 : 3] <= add_ln121_reg_577_pp0_iter5_reg[13 : 3];
        add_ln121_reg_577_pp0_iter7_reg[13 : 3] <= add_ln121_reg_577_pp0_iter6_reg[13 : 3];
        icmp_ln117_reg_525_pp0_iter2_reg <= icmp_ln117_reg_525_pp0_iter1_reg;
        icmp_ln117_reg_525_pp0_iter3_reg <= icmp_ln117_reg_525_pp0_iter2_reg;
        icmp_ln117_reg_525_pp0_iter4_reg <= icmp_ln117_reg_525_pp0_iter3_reg;
        icmp_ln117_reg_525_pp0_iter5_reg <= icmp_ln117_reg_525_pp0_iter4_reg;
        icmp_ln117_reg_525_pp0_iter6_reg <= icmp_ln117_reg_525_pp0_iter5_reg;
        icmp_ln122_reg_551_pp0_iter2_reg <= icmp_ln122_reg_551_pp0_iter1_reg;
        icmp_ln122_reg_551_pp0_iter3_reg <= icmp_ln122_reg_551_pp0_iter2_reg;
        icmp_ln122_reg_551_pp0_iter4_reg <= icmp_ln122_reg_551_pp0_iter3_reg;
        icmp_ln122_reg_551_pp0_iter5_reg <= icmp_ln122_reg_551_pp0_iter4_reg;
        icmp_ln122_reg_551_pp0_iter6_reg <= icmp_ln122_reg_551_pp0_iter5_reg;
        icmp_ln122_reg_551_pp0_iter7_reg <= icmp_ln122_reg_551_pp0_iter6_reg;
        select_ln118_1_reg_540_pp0_iter2_reg <= select_ln118_1_reg_540_pp0_iter1_reg;
        select_ln118_1_reg_540_pp0_iter3_reg <= select_ln118_1_reg_540_pp0_iter2_reg;
        select_ln118_1_reg_540_pp0_iter4_reg <= select_ln118_1_reg_540_pp0_iter3_reg;
        select_ln118_1_reg_540_pp0_iter5_reg <= select_ln118_1_reg_540_pp0_iter4_reg;
        select_ln118_1_reg_540_pp0_iter6_reg <= select_ln118_1_reg_540_pp0_iter5_reg;
        select_ln118_1_reg_540_pp0_iter7_reg <= select_ln118_1_reg_540_pp0_iter6_reg;
        select_ln118_reg_534_pp0_iter2_reg <= select_ln118_reg_534_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln117_reg_525_pp0_iter3_reg == 1'd0))) begin
        fft_coeff_M_imag_V_load_reg_617 <= fft_coeff_M_imag_V_q0;
        fft_coeff_M_real_V_load_reg_612 <= fft_coeff_M_real_V_q0;
        r_V_4_reg_607 <= a_M_imag_q0;
        r_V_reg_602 <= a_M_real_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln117_reg_525 <= icmp_ln117_fu_235_p2;
        icmp_ln117_reg_525_pp0_iter1_reg <= icmp_ln117_reg_525;
        icmp_ln118_reg_529_pp0_iter1_reg <= icmp_ln118_reg_529;
        icmp_ln122_reg_551_pp0_iter1_reg <= icmp_ln122_reg_551;
        select_ln118_1_reg_540_pp0_iter1_reg <= select_ln118_1_reg_540;
        select_ln118_reg_534_pp0_iter1_reg <= select_ln118_reg_534;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln117_fu_235_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln118_reg_529 <= icmp_ln118_fu_241_p2;
        icmp_ln122_reg_551 <= icmp_ln122_fu_305_p2;
        select_ln118_reg_534 <= select_ln118_fu_285_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln117_reg_525_pp0_iter5_reg == 1'd0))) begin
        mul_ln1192_reg_661 <= grp_fu_1150_p_dout0;
        mul_ln1193_reg_651 <= grp_fu_1134_p_dout0;
        mul_ln703_2_reg_656 <= grp_fu_1146_p_dout0;
        mul_ln703_reg_646 <= grp_fu_1130_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln117_reg_525_pp0_iter1_reg == 1'd0))) begin
        select_ln117_1_reg_565 <= select_ln117_1_fu_337_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln117_fu_235_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln118_1_reg_540 <= select_ln118_1_fu_293_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln117_reg_525_pp0_iter6_reg == 1'd0))) begin
        sum_M_imag_V_4_reg_671 <= sum_M_imag_V_4_fu_467_p2;
        sum_M_real_V_4_reg_666 <= sum_M_real_V_4_fu_461_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        a_M_imag_ce0 = 1'b1;
    end else begin
        a_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        a_M_real_ce0 = 1'b1;
    end else begin
        a_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_condition_pp0_exit_iter2_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln117_fu_235_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln117_reg_525_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_i_phi_fu_212_p4 = select_ln117_1_reg_565;
    end else begin
        ap_phi_mux_i_phi_fu_212_p4 = i_reg_208;
    end
end

always @ (*) begin
    if (((icmp_ln117_reg_525 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_j_phi_fu_190_p4 = select_ln118_1_reg_540;
    end else begin
        ap_phi_mux_j_phi_fu_190_p4 = j_reg_186;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        fft_coeff_M_imag_V_ce0 = 1'b1;
    end else begin
        fft_coeff_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        fft_coeff_M_real_V_ce0 = 1'b1;
    end else begin
        fft_coeff_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        out_M_imag_ce0 = 1'b1;
    end else begin
        out_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln122_reg_551_pp0_iter7_reg == 1'd1))) begin
        out_M_imag_we0 = 1'b1;
    end else begin
        out_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        out_M_real_ce0 = 1'b1;
    end else begin
        out_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln122_reg_551_pp0_iter7_reg == 1'd1))) begin
        out_M_real_we0 = 1'b1;
    end else begin
        out_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1) & (ap_enable_reg_pp0_iter7 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1) & (ap_enable_reg_pp0_iter7 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_M_imag_address0 = zext_ln121_1_fu_385_p1;

assign a_M_real_address0 = zext_ln121_1_fu_385_p1;

assign add_ln117_1_fu_229_p2 = (indvar_flatten19_reg_164 + 19'd1);

assign add_ln117_fu_331_p2 = (ap_phi_mux_i_phi_fu_212_p4 + 9'd1);

assign add_ln118_1_fu_317_p2 = (indvar_flatten_reg_175 + 12'd1);

assign add_ln118_fu_273_p2 = (select_ln117_fu_247_p3 + 6'd1);

assign add_ln119_fu_311_p2 = (select_ln118_fu_285_p3 + 6'd1);

assign add_ln121_1_fu_379_p2 = (add_ln121_fu_365_p2 + zext_ln1118_3_fu_371_p1);

assign add_ln121_fu_365_p2 = (tmp_fu_347_p3 + zext_ln121_fu_361_p1);

assign and_ln117_fu_267_p2 = (xor_ln117_fu_255_p2 & icmp_ln119_fu_261_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_28_fu_486_p2 = (add_ln121_reg_577_pp0_iter7_reg + zext_ln1118_fu_483_p1);

assign fft_coeff_M_imag_V_address0 = zext_ln1118_5_fu_374_p1;

assign fft_coeff_M_real_V_address0 = zext_ln1118_5_fu_374_p1;

assign grp_fu_1130_p_ce = 1'b1;

assign grp_fu_1130_p_din0 = sext_ln1118_fu_391_p1;

assign grp_fu_1130_p_din1 = sext_ln1118_7_fu_394_p1;

assign grp_fu_1134_p_ce = 1'b1;

assign grp_fu_1134_p_din0 = sext_ln1118_8_fu_397_p1;

assign grp_fu_1134_p_din1 = sext_ln1118_9_fu_400_p1;

assign grp_fu_1146_p_ce = 1'b1;

assign grp_fu_1146_p_din0 = sext_ln1118_8_fu_397_p1;

assign grp_fu_1146_p_din1 = sext_ln1118_7_fu_394_p1;

assign grp_fu_1150_p_ce = 1'b1;

assign grp_fu_1150_p_din0 = sext_ln1118_fu_391_p1;

assign grp_fu_1150_p_din1 = sext_ln1118_9_fu_400_p1;

assign grp_fu_403_ce = 1'b1;

assign grp_fu_403_p0 = sext_ln1118_fu_391_p1;

assign grp_fu_403_p1 = sext_ln1118_7_fu_394_p1;

assign grp_fu_403_p2 = grp_fu_1130_p_dout0;

assign grp_fu_409_ce = 1'b1;

assign grp_fu_409_p0 = sext_ln1118_8_fu_397_p1;

assign grp_fu_409_p1 = sext_ln1118_9_fu_400_p1;

assign grp_fu_409_p2 = grp_fu_1134_p_dout0;

assign grp_fu_415_ce = 1'b1;

assign grp_fu_415_p0 = sext_ln1118_8_fu_397_p1;

assign grp_fu_415_p1 = sext_ln1118_7_fu_394_p1;

assign grp_fu_415_p2 = grp_fu_1146_p_dout0;

assign grp_fu_421_ce = 1'b1;

assign grp_fu_421_p0 = sext_ln1118_fu_391_p1;

assign grp_fu_421_p1 = sext_ln1118_9_fu_400_p1;

assign grp_fu_421_p2 = grp_fu_1150_p_dout0;

assign grp_fu_497_p0 = grp_fu_497_p00;

assign grp_fu_497_p00 = select_ln118_1_fu_293_p3;

assign grp_fu_497_p1 = 11'd39;

assign grp_fu_497_p2 = grp_fu_497_p20;

assign grp_fu_497_p20 = select_ln118_reg_534_pp0_iter1_reg;

assign icmp_ln117_fu_235_p2 = ((indvar_flatten19_reg_164 == 19'd320512) ? 1'b1 : 1'b0);

assign icmp_ln118_fu_241_p2 = ((indvar_flatten_reg_175 == 12'd1024) ? 1'b1 : 1'b0);

assign icmp_ln119_fu_261_p2 = ((k_reg_197 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln122_fu_305_p2 = ((select_ln118_fu_285_p3 == 6'd31) ? 1'b1 : 1'b0);

assign or_ln118_fu_279_p2 = (icmp_ln118_fu_241_p2 | and_ln117_fu_267_p2);

assign out_M_imag_address0 = p_cast_fu_491_p1;

assign out_M_imag_d0 = sum_M_imag_V_4_reg_671;

assign out_M_real_address0 = p_cast_fu_491_p1;

assign out_M_real_d0 = sum_M_real_V_4_reg_666;

assign p_cast_fu_491_p1 = empty_28_fu_486_p2;

assign p_r_V_fu_437_p4 = {{ret_V_fu_433_p2[39:8]}};

assign ret_V_2_fu_447_p2 = (mul_ln703_2_reg_656 + mul_ln1192_reg_661);

assign ret_V_fu_433_p2 = (mul_ln703_reg_646 - mul_ln1193_reg_651);

assign select_ln117_1_fu_337_p3 = ((icmp_ln118_reg_529_pp0_iter1_reg[0:0] == 1'b1) ? add_ln117_fu_331_p2 : ap_phi_mux_i_phi_fu_212_p4);

assign select_ln117_fu_247_p3 = ((icmp_ln118_fu_241_p2[0:0] == 1'b1) ? 6'd0 : ap_phi_mux_j_phi_fu_190_p4);

assign select_ln118_1_fu_293_p3 = ((and_ln117_fu_267_p2[0:0] == 1'b1) ? add_ln118_fu_273_p2 : select_ln117_fu_247_p3);

assign select_ln118_2_fu_323_p3 = ((icmp_ln118_fu_241_p2[0:0] == 1'b1) ? 12'd1 : add_ln118_1_fu_317_p2);

assign select_ln118_fu_285_p3 = ((or_ln118_fu_279_p2[0:0] == 1'b1) ? 6'd0 : k_reg_197);

assign sext_ln1118_7_fu_394_p1 = $signed(r_V_reg_602);

assign sext_ln1118_8_fu_397_p1 = $signed(fft_coeff_M_imag_V_load_reg_617);

assign sext_ln1118_9_fu_400_p1 = $signed(r_V_4_reg_607);

assign sext_ln1118_fu_391_p1 = $signed(fft_coeff_M_real_V_load_reg_612);

assign sum_M_imag_V_4_fu_467_p2 = (trunc_ln_fu_451_p4 + sum_M_imag_V_fu_82);

assign sum_M_real_V_4_fu_461_p2 = (p_r_V_fu_437_p4 + sum_M_real_V_fu_78);

assign tmp_fu_347_p3 = {{select_ln117_1_reg_565}, {5'd0}};

assign tmp_s_fu_354_p3 = {{select_ln117_1_reg_565}, {3'd0}};

assign trunc_ln_fu_451_p4 = {{ret_V_2_fu_447_p2[39:8]}};

assign xor_ln117_fu_255_p2 = (icmp_ln118_fu_241_p2 ^ 1'd1);

assign zext_ln1118_3_fu_371_p1 = select_ln118_reg_534_pp0_iter2_reg;

assign zext_ln1118_5_fu_374_p1 = grp_fu_497_p3;

assign zext_ln1118_fu_483_p1 = select_ln118_1_reg_540_pp0_iter7_reg;

assign zext_ln121_1_fu_385_p1 = add_ln121_1_fu_379_p2;

assign zext_ln121_fu_361_p1 = tmp_s_fu_354_p3;

always @ (posedge ap_clk) begin
    add_ln121_reg_577[2:0] <= 3'b000;
    add_ln121_reg_577_pp0_iter4_reg[2:0] <= 3'b000;
    add_ln121_reg_577_pp0_iter5_reg[2:0] <= 3'b000;
    add_ln121_reg_577_pp0_iter6_reg[2:0] <= 3'b000;
    add_ln121_reg_577_pp0_iter7_reg[2:0] <= 3'b000;
end

endmodule //top_fft
