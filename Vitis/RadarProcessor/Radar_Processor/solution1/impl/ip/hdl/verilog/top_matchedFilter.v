// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_matchedFilter (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_M_real_address0,
        a_M_real_ce0,
        a_M_real_q0,
        a_M_imag_address0,
        a_M_imag_ce0,
        a_M_imag_q0,
        out_M_real_address0,
        out_M_real_ce0,
        out_M_real_we0,
        out_M_real_d0,
        out_M_imag_address0,
        out_M_imag_ce0,
        out_M_imag_we0,
        out_M_imag_d0,
        grp_fu_739_p_din0,
        grp_fu_739_p_din1,
        grp_fu_739_p_dout0,
        grp_fu_739_p_ce,
        grp_fu_748_p_din0,
        grp_fu_748_p_din1,
        grp_fu_748_p_dout0,
        grp_fu_748_p_ce,
        grp_fu_1138_p_din0,
        grp_fu_1138_p_din1,
        grp_fu_1138_p_dout0,
        grp_fu_1138_p_ce,
        grp_fu_1142_p_din0,
        grp_fu_1142_p_din1,
        grp_fu_1142_p_dout0,
        grp_fu_1142_p_ce
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state9 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] a_M_real_address0;
output   a_M_real_ce0;
input  [31:0] a_M_real_q0;
output  [13:0] a_M_imag_address0;
output   a_M_imag_ce0;
input  [31:0] a_M_imag_q0;
output  [13:0] out_M_real_address0;
output   out_M_real_ce0;
output   out_M_real_we0;
output  [31:0] out_M_real_d0;
output  [13:0] out_M_imag_address0;
output   out_M_imag_ce0;
output   out_M_imag_we0;
output  [31:0] out_M_imag_d0;
output  [9:0] grp_fu_739_p_din0;
output  [31:0] grp_fu_739_p_din1;
input  [39:0] grp_fu_739_p_dout0;
output   grp_fu_739_p_ce;
output  [9:0] grp_fu_748_p_din0;
output  [31:0] grp_fu_748_p_din1;
input  [39:0] grp_fu_748_p_dout0;
output   grp_fu_748_p_ce;
output  [8:0] grp_fu_1138_p_din0;
output  [31:0] grp_fu_1138_p_din1;
input  [39:0] grp_fu_1138_p_dout0;
output   grp_fu_1138_p_ce;
output  [8:0] grp_fu_1142_p_din0;
output  [31:0] grp_fu_1142_p_din1;
input  [39:0] grp_fu_1142_p_dout0;
output   grp_fu_1142_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_M_real_ce0;
reg a_M_imag_ce0;
reg out_M_real_ce0;
reg out_M_real_we0;
reg out_M_imag_ce0;
reg out_M_imag_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] matchedFilter_coeff_M_real_V_address0;
reg    matchedFilter_coeff_M_real_V_ce0;
wire   [8:0] matchedFilter_coeff_M_real_V_q0;
wire   [6:0] matchedFilter_coeff_M_imag_V_address0;
reg    matchedFilter_coeff_M_imag_V_ce0;
wire   [8:0] matchedFilter_coeff_M_imag_V_q0;
reg   [21:0] indvar_flatten21_reg_164;
reg   [5:0] k_reg_175;
reg   [17:0] indvar_flatten_reg_186;
reg   [8:0] i_reg_197;
reg   [8:0] j_reg_208;
wire   [21:0] add_ln90_1_fu_229_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln90_fu_235_p2;
reg   [0:0] icmp_ln90_reg_564;
reg   [0:0] icmp_ln90_reg_564_pp0_iter1_reg;
reg   [0:0] icmp_ln90_reg_564_pp0_iter2_reg;
reg   [0:0] icmp_ln90_reg_564_pp0_iter3_reg;
reg   [0:0] icmp_ln90_reg_564_pp0_iter4_reg;
wire   [5:0] select_ln90_1_fu_261_p3;
reg   [5:0] select_ln90_1_reg_568;
wire   [8:0] select_ln91_fu_299_p3;
reg   [8:0] select_ln91_reg_574;
wire   [8:0] select_ln91_1_fu_307_p3;
reg   [8:0] select_ln91_1_reg_581;
reg   [8:0] select_ln91_1_reg_581_pp0_iter1_reg;
reg   [8:0] select_ln91_1_reg_581_pp0_iter2_reg;
reg   [8:0] select_ln91_1_reg_581_pp0_iter3_reg;
reg   [8:0] select_ln91_1_reg_581_pp0_iter4_reg;
reg   [8:0] select_ln91_1_reg_581_pp0_iter5_reg;
wire   [0:0] icmp_ln96_fu_315_p2;
reg   [0:0] icmp_ln96_reg_589;
reg   [0:0] icmp_ln96_reg_589_pp0_iter1_reg;
reg   [0:0] icmp_ln96_reg_589_pp0_iter2_reg;
reg   [0:0] icmp_ln96_reg_589_pp0_iter3_reg;
reg   [0:0] icmp_ln96_reg_589_pp0_iter4_reg;
reg   [0:0] icmp_ln96_reg_589_pp0_iter5_reg;
wire   [8:0] add_ln92_fu_321_p2;
wire   [17:0] select_ln91_2_fu_333_p3;
wire   [13:0] zext_ln91_fu_341_p1;
reg   [13:0] zext_ln91_reg_603;
reg   [13:0] zext_ln91_reg_603_pp0_iter2_reg;
reg   [13:0] zext_ln91_reg_603_pp0_iter3_reg;
reg   [13:0] zext_ln91_reg_603_pp0_iter4_reg;
reg   [13:0] zext_ln91_reg_603_pp0_iter5_reg;
wire   [0:0] icmp_ln94_fu_398_p2;
reg   [0:0] icmp_ln94_reg_618;
reg   [0:0] icmp_ln94_reg_618_pp0_iter2_reg;
reg   [0:0] icmp_ln94_reg_618_pp0_iter3_reg;
reg   [0:0] icmp_ln94_reg_618_pp0_iter4_reg;
reg   [0:0] icmp_ln94_reg_618_pp0_iter5_reg;
reg   [31:0] r_V_reg_634;
reg   [31:0] r_V_3_reg_639;
reg   [8:0] matchedFilter_coeff_M_real_V_load_reg_644;
reg   [8:0] matchedFilter_coeff_M_imag_V_load_reg_649;
wire  signed [39:0] sext_ln1118_fu_404_p1;
wire  signed [39:0] sext_ln1118_4_fu_407_p1;
wire  signed [39:0] sext_ln1118_5_fu_410_p1;
wire  signed [39:0] sext_ln1118_6_fu_413_p1;
wire   [39:0] grp_fu_416_p2;
reg   [39:0] mul_ln703_reg_678;
wire   [39:0] grp_fu_422_p2;
reg   [39:0] mul_ln1193_reg_683;
wire   [39:0] grp_fu_428_p2;
reg   [39:0] mul_ln703_1_reg_688;
wire   [39:0] grp_fu_434_p2;
reg   [39:0] mul_ln1192_reg_693;
reg   [31:0] p_r_V_reg_698;
reg   [31:0] trunc_ln_reg_703;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg   [5:0] ap_phi_mux_k_phi_fu_179_p4;
wire    ap_block_pp0_stage0;
reg   [8:0] ap_phi_mux_i_phi_fu_201_p4;
wire   [63:0] zext_ln95_1_fu_377_p1;
wire   [63:0] zext_ln94_fu_392_p1;
wire   [63:0] p_cast_fu_503_p1;
reg   [31:0] p_r_M_real_V_2_fu_78;
wire   [31:0] p_r_M_real_V_3_fu_527_p3;
reg   [31:0] p_r_M_imag_V_3_fu_82;
wire   [31:0] p_r_M_imag_V_4_fu_519_p3;
wire   [0:0] icmp_ln91_fu_247_p2;
wire   [5:0] add_ln90_fu_241_p2;
wire   [0:0] icmp_ln92_fu_275_p2;
wire   [0:0] xor_ln90_fu_269_p2;
wire   [8:0] select_ln90_fu_253_p3;
wire   [0:0] and_ln90_fu_281_p2;
wire   [0:0] or_ln91_fu_293_p2;
wire   [8:0] add_ln91_fu_287_p2;
wire   [17:0] add_ln91_1_fu_327_p2;
wire   [11:0] tmp_9_fu_354_p3;
wire   [13:0] tmp_8_fu_347_p3;
wire   [13:0] zext_ln95_fu_361_p1;
wire   [13:0] add_ln95_fu_365_p2;
wire   [13:0] add_ln95_1_fu_371_p2;
wire   [9:0] zext_ln91_1_fu_344_p1;
wire   [9:0] zext_ln92_fu_383_p1;
wire   [9:0] sub_ln94_fu_386_p2;
wire  signed [8:0] grp_fu_416_p0;
wire  signed [31:0] grp_fu_416_p1;
wire  signed [8:0] grp_fu_422_p0;
wire  signed [31:0] grp_fu_422_p1;
wire  signed [8:0] grp_fu_428_p0;
wire  signed [31:0] grp_fu_428_p1;
wire  signed [8:0] grp_fu_434_p0;
wire  signed [31:0] grp_fu_434_p1;
wire   [39:0] ret_V_fu_440_p2;
wire   [39:0] ret_V_1_fu_454_p2;
wire   [11:0] tmp_fu_481_p3;
wire   [13:0] p_shl2_cast_fu_474_p3;
wire   [13:0] p_shl3_cast_fu_488_p1;
wire   [13:0] empty_26_fu_492_p2;
wire   [13:0] empty_27_fu_498_p2;
wire   [31:0] p_r_M_imag_V_fu_514_p2;
wire   [31:0] p_r_M_real_V_fu_509_p2;
wire    grp_fu_416_ce;
wire    grp_fu_422_ce;
wire    grp_fu_428_ce;
wire    grp_fu_434_ce;
wire    ap_CS_fsm_state9;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

top_matchedFilter_matchedFilter_coeff_M_real_V #(
    .DataWidth( 9 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
matchedFilter_coeff_M_real_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(matchedFilter_coeff_M_real_V_address0),
    .ce0(matchedFilter_coeff_M_real_V_ce0),
    .q0(matchedFilter_coeff_M_real_V_q0)
);

top_matchedFilter_matchedFilter_coeff_M_imag_V #(
    .DataWidth( 9 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
matchedFilter_coeff_M_imag_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(matchedFilter_coeff_M_imag_V_address0),
    .ce0(matchedFilter_coeff_M_imag_V_ce0),
    .q0(matchedFilter_coeff_M_imag_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_reg_564 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_197 <= select_ln91_1_reg_581;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_197 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_fu_235_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten21_reg_164 <= add_ln90_1_fu_229_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten21_reg_164 <= 22'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_fu_235_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_186 <= select_ln91_2_fu_333_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_186 <= 18'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_fu_235_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_208 <= add_ln92_fu_321_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_208 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_reg_564 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_reg_175 <= select_ln90_1_reg_568;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_175 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln96_reg_589_pp0_iter5_reg == 1'd1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        p_r_M_imag_V_3_fu_82 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln96_reg_589_pp0_iter5_reg == 1'd0))) begin
        p_r_M_imag_V_3_fu_82 <= p_r_M_imag_V_4_fu_519_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln96_reg_589_pp0_iter5_reg == 1'd1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        p_r_M_real_V_2_fu_78 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln96_reg_589_pp0_iter5_reg == 1'd0))) begin
        p_r_M_real_V_2_fu_78 <= p_r_M_real_V_3_fu_527_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln90_reg_564 <= icmp_ln90_fu_235_p2;
        icmp_ln90_reg_564_pp0_iter1_reg <= icmp_ln90_reg_564;
        icmp_ln96_reg_589_pp0_iter1_reg <= icmp_ln96_reg_589;
        select_ln91_1_reg_581_pp0_iter1_reg <= select_ln91_1_reg_581;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln90_reg_564_pp0_iter2_reg <= icmp_ln90_reg_564_pp0_iter1_reg;
        icmp_ln90_reg_564_pp0_iter3_reg <= icmp_ln90_reg_564_pp0_iter2_reg;
        icmp_ln90_reg_564_pp0_iter4_reg <= icmp_ln90_reg_564_pp0_iter3_reg;
        icmp_ln94_reg_618_pp0_iter2_reg <= icmp_ln94_reg_618;
        icmp_ln94_reg_618_pp0_iter3_reg <= icmp_ln94_reg_618_pp0_iter2_reg;
        icmp_ln94_reg_618_pp0_iter4_reg <= icmp_ln94_reg_618_pp0_iter3_reg;
        icmp_ln94_reg_618_pp0_iter5_reg <= icmp_ln94_reg_618_pp0_iter4_reg;
        icmp_ln96_reg_589_pp0_iter2_reg <= icmp_ln96_reg_589_pp0_iter1_reg;
        icmp_ln96_reg_589_pp0_iter3_reg <= icmp_ln96_reg_589_pp0_iter2_reg;
        icmp_ln96_reg_589_pp0_iter4_reg <= icmp_ln96_reg_589_pp0_iter3_reg;
        icmp_ln96_reg_589_pp0_iter5_reg <= icmp_ln96_reg_589_pp0_iter4_reg;
        select_ln91_1_reg_581_pp0_iter2_reg <= select_ln91_1_reg_581_pp0_iter1_reg;
        select_ln91_1_reg_581_pp0_iter3_reg <= select_ln91_1_reg_581_pp0_iter2_reg;
        select_ln91_1_reg_581_pp0_iter4_reg <= select_ln91_1_reg_581_pp0_iter3_reg;
        select_ln91_1_reg_581_pp0_iter5_reg <= select_ln91_1_reg_581_pp0_iter4_reg;
        zext_ln91_reg_603_pp0_iter2_reg[5 : 0] <= zext_ln91_reg_603[5 : 0];
        zext_ln91_reg_603_pp0_iter3_reg[5 : 0] <= zext_ln91_reg_603_pp0_iter2_reg[5 : 0];
        zext_ln91_reg_603_pp0_iter4_reg[5 : 0] <= zext_ln91_reg_603_pp0_iter3_reg[5 : 0];
        zext_ln91_reg_603_pp0_iter5_reg[5 : 0] <= zext_ln91_reg_603_pp0_iter4_reg[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_reg_564 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln94_reg_618 <= icmp_ln94_fu_398_p2;
        zext_ln91_reg_603[5 : 0] <= zext_ln91_fu_341_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_fu_235_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln96_reg_589 <= icmp_ln96_fu_315_p2;
        select_ln91_reg_574 <= select_ln91_fu_299_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_reg_564_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        matchedFilter_coeff_M_imag_V_load_reg_649 <= matchedFilter_coeff_M_imag_V_q0;
        matchedFilter_coeff_M_real_V_load_reg_644 <= matchedFilter_coeff_M_real_V_q0;
        r_V_3_reg_639 <= a_M_imag_q0;
        r_V_reg_634 <= a_M_real_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln94_reg_618_pp0_iter3_reg == 1'd1) & (icmp_ln90_reg_564_pp0_iter3_reg == 1'd0))) begin
        mul_ln1192_reg_693 <= grp_fu_1142_p_dout0;
        mul_ln1193_reg_683 <= grp_fu_748_p_dout0;
        mul_ln703_1_reg_688 <= grp_fu_1138_p_dout0;
        mul_ln703_reg_678 <= grp_fu_739_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln94_reg_618_pp0_iter4_reg == 1'd1) & (icmp_ln90_reg_564_pp0_iter4_reg == 1'd0))) begin
        p_r_V_reg_698 <= {{ret_V_fu_440_p2[39:8]}};
        trunc_ln_reg_703 <= {{ret_V_1_fu_454_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_fu_235_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln90_1_reg_568 <= select_ln90_1_fu_261_p3;
        select_ln91_1_reg_581 <= select_ln91_1_fu_307_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_M_imag_ce0 = 1'b1;
    end else begin
        a_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_M_real_ce0 = 1'b1;
    end else begin
        a_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln90_fu_235_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln90_reg_564 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_201_p4 = select_ln91_1_reg_581;
    end else begin
        ap_phi_mux_i_phi_fu_201_p4 = i_reg_197;
    end
end

always @ (*) begin
    if (((icmp_ln90_reg_564 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_k_phi_fu_179_p4 = select_ln90_1_reg_568;
    end else begin
        ap_phi_mux_k_phi_fu_179_p4 = k_reg_175;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        matchedFilter_coeff_M_imag_V_ce0 = 1'b1;
    end else begin
        matchedFilter_coeff_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        matchedFilter_coeff_M_real_V_ce0 = 1'b1;
    end else begin
        matchedFilter_coeff_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        out_M_imag_ce0 = 1'b1;
    end else begin
        out_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln96_reg_589_pp0_iter5_reg == 1'd1))) begin
        out_M_imag_we0 = 1'b1;
    end else begin
        out_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        out_M_real_ce0 = 1'b1;
    end else begin
        out_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln96_reg_589_pp0_iter5_reg == 1'd1))) begin
        out_M_real_we0 = 1'b1;
    end else begin
        out_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln90_fu_235_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln90_fu_235_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_M_imag_address0 = zext_ln95_1_fu_377_p1;

assign a_M_real_address0 = zext_ln95_1_fu_377_p1;

assign add_ln90_1_fu_229_p2 = (indvar_flatten21_reg_164 + 22'd1);

assign add_ln90_fu_241_p2 = (ap_phi_mux_k_phi_fu_179_p4 + 6'd1);

assign add_ln91_1_fu_327_p2 = (indvar_flatten_reg_186 + 18'd1);

assign add_ln91_fu_287_p2 = (select_ln90_fu_253_p3 + 9'd1);

assign add_ln92_fu_321_p2 = (select_ln91_fu_299_p3 + 9'd1);

assign add_ln95_1_fu_371_p2 = (add_ln95_fu_365_p2 + zext_ln91_fu_341_p1);

assign add_ln95_fu_365_p2 = (tmp_8_fu_347_p3 + zext_ln95_fu_361_p1);

assign and_ln90_fu_281_p2 = (xor_ln90_fu_269_p2 & icmp_ln92_fu_275_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_26_fu_492_p2 = (p_shl2_cast_fu_474_p3 + p_shl3_cast_fu_488_p1);

assign empty_27_fu_498_p2 = (empty_26_fu_492_p2 + zext_ln91_reg_603_pp0_iter5_reg);

assign grp_fu_1138_p_ce = 1'b1;

assign grp_fu_1138_p_din0 = sext_ln1118_5_fu_410_p1;

assign grp_fu_1138_p_din1 = sext_ln1118_4_fu_407_p1;

assign grp_fu_1142_p_ce = 1'b1;

assign grp_fu_1142_p_din0 = sext_ln1118_fu_404_p1;

assign grp_fu_1142_p_din1 = sext_ln1118_6_fu_413_p1;

assign grp_fu_416_ce = 1'b1;

assign grp_fu_416_p0 = sext_ln1118_fu_404_p1;

assign grp_fu_416_p1 = sext_ln1118_4_fu_407_p1;

assign grp_fu_416_p2 = grp_fu_739_p_dout0;

assign grp_fu_422_ce = 1'b1;

assign grp_fu_422_p0 = sext_ln1118_5_fu_410_p1;

assign grp_fu_422_p1 = sext_ln1118_6_fu_413_p1;

assign grp_fu_422_p2 = grp_fu_748_p_dout0;

assign grp_fu_428_ce = 1'b1;

assign grp_fu_428_p0 = sext_ln1118_5_fu_410_p1;

assign grp_fu_428_p1 = sext_ln1118_4_fu_407_p1;

assign grp_fu_428_p2 = grp_fu_1138_p_dout0;

assign grp_fu_434_ce = 1'b1;

assign grp_fu_434_p0 = sext_ln1118_fu_404_p1;

assign grp_fu_434_p1 = sext_ln1118_6_fu_413_p1;

assign grp_fu_434_p2 = grp_fu_1142_p_dout0;

assign grp_fu_739_p_ce = 1'b1;

assign grp_fu_739_p_din0 = sext_ln1118_fu_404_p1;

assign grp_fu_739_p_din1 = sext_ln1118_4_fu_407_p1;

assign grp_fu_748_p_ce = 1'b1;

assign grp_fu_748_p_din0 = sext_ln1118_5_fu_410_p1;

assign grp_fu_748_p_din1 = sext_ln1118_6_fu_413_p1;

assign icmp_ln90_fu_235_p2 = ((indvar_flatten21_reg_164 == 22'd3820791) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_247_p2 = ((indvar_flatten_reg_186 == 18'd97969) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_275_p2 = ((j_reg_208 == 9'd313) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_398_p2 = ((sub_ln94_fu_386_p2 < 10'd120) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_315_p2 = ((select_ln91_fu_299_p3 == 9'd312) ? 1'b1 : 1'b0);

assign matchedFilter_coeff_M_imag_V_address0 = zext_ln94_fu_392_p1;

assign matchedFilter_coeff_M_real_V_address0 = zext_ln94_fu_392_p1;

assign or_ln91_fu_293_p2 = (icmp_ln91_fu_247_p2 | and_ln90_fu_281_p2);

assign out_M_imag_address0 = p_cast_fu_503_p1;

assign out_M_imag_d0 = ((icmp_ln94_reg_618_pp0_iter5_reg[0:0] == 1'b1) ? p_r_M_imag_V_fu_514_p2 : p_r_M_imag_V_3_fu_82);

assign out_M_real_address0 = p_cast_fu_503_p1;

assign out_M_real_d0 = ((icmp_ln94_reg_618_pp0_iter5_reg[0:0] == 1'b1) ? p_r_M_real_V_fu_509_p2 : p_r_M_real_V_2_fu_78);

assign p_cast_fu_503_p1 = empty_27_fu_498_p2;

assign p_r_M_imag_V_4_fu_519_p3 = ((icmp_ln94_reg_618_pp0_iter5_reg[0:0] == 1'b1) ? p_r_M_imag_V_fu_514_p2 : p_r_M_imag_V_3_fu_82);

assign p_r_M_imag_V_fu_514_p2 = (trunc_ln_reg_703 + p_r_M_imag_V_3_fu_82);

assign p_r_M_real_V_3_fu_527_p3 = ((icmp_ln94_reg_618_pp0_iter5_reg[0:0] == 1'b1) ? p_r_M_real_V_fu_509_p2 : p_r_M_real_V_2_fu_78);

assign p_r_M_real_V_fu_509_p2 = (p_r_V_reg_698 + p_r_M_real_V_2_fu_78);

assign p_shl2_cast_fu_474_p3 = {{select_ln91_1_reg_581_pp0_iter5_reg}, {5'd0}};

assign p_shl3_cast_fu_488_p1 = tmp_fu_481_p3;

assign ret_V_1_fu_454_p2 = (mul_ln703_1_reg_688 + mul_ln1192_reg_693);

assign ret_V_fu_440_p2 = (mul_ln703_reg_678 - mul_ln1193_reg_683);

assign select_ln90_1_fu_261_p3 = ((icmp_ln91_fu_247_p2[0:0] == 1'b1) ? add_ln90_fu_241_p2 : ap_phi_mux_k_phi_fu_179_p4);

assign select_ln90_fu_253_p3 = ((icmp_ln91_fu_247_p2[0:0] == 1'b1) ? 9'd0 : ap_phi_mux_i_phi_fu_201_p4);

assign select_ln91_1_fu_307_p3 = ((and_ln90_fu_281_p2[0:0] == 1'b1) ? add_ln91_fu_287_p2 : select_ln90_fu_253_p3);

assign select_ln91_2_fu_333_p3 = ((icmp_ln91_fu_247_p2[0:0] == 1'b1) ? 18'd1 : add_ln91_1_fu_327_p2);

assign select_ln91_fu_299_p3 = ((or_ln91_fu_293_p2[0:0] == 1'b1) ? 9'd0 : j_reg_208);

assign sext_ln1118_4_fu_407_p1 = $signed(r_V_reg_634);

assign sext_ln1118_5_fu_410_p1 = $signed(matchedFilter_coeff_M_imag_V_load_reg_649);

assign sext_ln1118_6_fu_413_p1 = $signed(r_V_3_reg_639);

assign sext_ln1118_fu_404_p1 = $signed(matchedFilter_coeff_M_real_V_load_reg_644);

assign sub_ln94_fu_386_p2 = (zext_ln91_1_fu_344_p1 - zext_ln92_fu_383_p1);

assign tmp_8_fu_347_p3 = {{select_ln91_reg_574}, {5'd0}};

assign tmp_9_fu_354_p3 = {{select_ln91_reg_574}, {3'd0}};

assign tmp_fu_481_p3 = {{select_ln91_1_reg_581_pp0_iter5_reg}, {3'd0}};

assign xor_ln90_fu_269_p2 = (icmp_ln91_fu_247_p2 ^ 1'd1);

assign zext_ln91_1_fu_344_p1 = select_ln91_1_reg_581;

assign zext_ln91_fu_341_p1 = select_ln90_1_reg_568;

assign zext_ln92_fu_383_p1 = select_ln91_reg_574;

assign zext_ln94_fu_392_p1 = sub_ln94_fu_386_p2;

assign zext_ln95_1_fu_377_p1 = add_ln95_1_fu_371_p2;

assign zext_ln95_fu_361_p1 = tmp_9_fu_354_p3;

always @ (posedge ap_clk) begin
    zext_ln91_reg_603[13:6] <= 8'b00000000;
    zext_ln91_reg_603_pp0_iter2_reg[13:6] <= 8'b00000000;
    zext_ln91_reg_603_pp0_iter3_reg[13:6] <= 8'b00000000;
    zext_ln91_reg_603_pp0_iter4_reg[13:6] <= 8'b00000000;
    zext_ln91_reg_603_pp0_iter5_reg[13:6] <= 8'b00000000;
end

endmodule //top_matchedFilter
