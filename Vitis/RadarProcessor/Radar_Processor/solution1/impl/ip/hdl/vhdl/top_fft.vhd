-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_fft is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_M_real_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    a_M_real_ce0 : OUT STD_LOGIC;
    a_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_M_imag_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    a_M_imag_ce0 : OUT STD_LOGIC;
    a_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_M_real_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_M_real_ce0 : OUT STD_LOGIC;
    out_M_real_we0 : OUT STD_LOGIC;
    out_M_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_M_imag_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_M_imag_ce0 : OUT STD_LOGIC;
    out_M_imag_we0 : OUT STD_LOGIC;
    out_M_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1130_p_din0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    grp_fu_1130_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1130_p_dout0 : IN STD_LOGIC_VECTOR (39 downto 0);
    grp_fu_1130_p_ce : OUT STD_LOGIC;
    grp_fu_1134_p_din0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    grp_fu_1134_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1134_p_dout0 : IN STD_LOGIC_VECTOR (39 downto 0);
    grp_fu_1134_p_ce : OUT STD_LOGIC;
    grp_fu_1146_p_din0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    grp_fu_1146_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1146_p_dout0 : IN STD_LOGIC_VECTOR (39 downto 0);
    grp_fu_1146_p_ce : OUT STD_LOGIC;
    grp_fu_1150_p_din0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    grp_fu_1150_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1150_p_dout0 : IN STD_LOGIC_VECTOR (39 downto 0);
    grp_fu_1150_p_ce : OUT STD_LOGIC );
end;


architecture behav of top_fft is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv19_4E400 : STD_LOGIC_VECTOR (18 downto 0) := "1001110010000000000";
    constant ap_const_lv12_400 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv11_27 : STD_LOGIC_VECTOR (10 downto 0) := "00000100111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fft_coeff_M_real_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fft_coeff_M_real_V_ce0 : STD_LOGIC;
    signal fft_coeff_M_real_V_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal fft_coeff_M_imag_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fft_coeff_M_imag_V_ce0 : STD_LOGIC;
    signal fft_coeff_M_imag_V_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten19_reg_164 : STD_LOGIC_VECTOR (18 downto 0);
    signal indvar_flatten_reg_175 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_reg_186 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_reg_197 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_208 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln117_1_fu_229_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln117_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_reg_525 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_reg_525_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_reg_525_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_reg_525_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_reg_525_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_reg_525_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_reg_525_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln118_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln118_reg_529 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln118_reg_529_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln118_fu_285_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln118_reg_534 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln118_reg_534_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln118_reg_534_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln118_1_fu_293_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln118_1_reg_540 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln118_1_reg_540_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln118_1_reg_540_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln118_1_reg_540_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln118_1_reg_540_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln118_1_reg_540_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln118_1_reg_540_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln118_1_reg_540_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln122_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_551 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_551_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_551_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_551_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_551_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_551_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_551_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_551_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln119_fu_311_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln118_2_fu_323_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln117_1_fu_337_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln117_1_reg_565 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal add_ln121_fu_365_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln121_reg_577 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln121_reg_577_pp0_iter4_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln121_reg_577_pp0_iter5_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln121_reg_577_pp0_iter6_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln121_reg_577_pp0_iter7_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_reg_602 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_4_reg_607 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_coeff_M_real_V_load_reg_612 : STD_LOGIC_VECTOR (9 downto 0);
    signal fft_coeff_M_imag_V_load_reg_617 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1118_fu_391_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln1118_7_fu_394_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln1118_8_fu_397_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln1118_9_fu_400_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_403_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln703_reg_646 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_409_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1193_reg_651 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_415_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln703_2_reg_656 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_421_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_reg_661 : STD_LOGIC_VECTOR (39 downto 0);
    signal sum_M_real_V_4_fu_461_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_M_real_V_4_reg_666 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_M_imag_V_4_fu_467_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_M_imag_V_4_reg_671 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter2_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_phi_mux_j_phi_fu_190_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_phi_fu_212_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1118_5_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_1_fu_385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_fu_491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_M_real_V_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_M_imag_V_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln119_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln117_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_fu_247_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln117_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln118_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln118_fu_273_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln118_1_fu_317_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln117_fu_331_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_354_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_347_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln121_fu_361_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_497_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1118_3_fu_371_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln121_1_fu_379_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_403_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_403_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_409_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_409_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_415_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_415_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_421_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_421_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_fu_433_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_2_fu_447_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal p_r_V_fu_437_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_451_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1118_fu_483_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_28_fu_486_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_497_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_497_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_497_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_403_ce : STD_LOGIC;
    signal grp_fu_409_ce : STD_LOGIC;
    signal grp_fu_415_ce : STD_LOGIC;
    signal grp_fu_421_ce : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_497_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_497_p20 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component top_mul_10s_32s_40_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component top_mac_muladd_6ns_7ns_6ns_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component top_fft_fft_coeff_M_real_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component top_fft_fft_coeff_M_imag_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    fft_coeff_M_real_V_U : component top_fft_fft_coeff_M_real_V
    generic map (
        DataWidth => 10,
        AddressRange => 1521,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fft_coeff_M_real_V_address0,
        ce0 => fft_coeff_M_real_V_ce0,
        q0 => fft_coeff_M_real_V_q0);

    fft_coeff_M_imag_V_U : component top_fft_fft_coeff_M_imag_V
    generic map (
        DataWidth => 10,
        AddressRange => 1521,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fft_coeff_M_imag_V_address0,
        ce0 => fft_coeff_M_imag_V_ce0,
        q0 => fft_coeff_M_imag_V_q0);

    mac_muladd_6ns_7ns_6ns_11_4_1_U26 : component top_mac_muladd_6ns_7ns_6ns_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 6,
        din1_WIDTH => 7,
        din2_WIDTH => 6,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_497_p0,
        din1 => grp_fu_497_p1,
        din2 => grp_fu_497_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_497_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter2_state4)) then 
                        ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln117_reg_525_pp0_iter2_reg = ap_const_lv1_0))) then 
                i_reg_208 <= select_ln117_1_reg_565;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_208 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten19_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln117_fu_235_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten19_reg_164 <= add_ln117_1_fu_229_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten19_reg_164 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln117_fu_235_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_175 <= select_ln118_2_fu_323_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_175 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    j_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln117_reg_525 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_reg_186 <= select_ln118_1_reg_540;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_reg_186 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    k_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln117_fu_235_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                k_reg_197 <= add_ln119_fu_311_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_reg_197 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    sum_M_imag_V_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln122_reg_551_pp0_iter6_reg = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                sum_M_imag_V_fu_82 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln122_reg_551_pp0_iter6_reg = ap_const_lv1_0))) then 
                sum_M_imag_V_fu_82 <= sum_M_imag_V_4_fu_467_p2;
            end if; 
        end if;
    end process;

    sum_M_real_V_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln122_reg_551_pp0_iter6_reg = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                sum_M_real_V_fu_78 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln122_reg_551_pp0_iter6_reg = ap_const_lv1_0))) then 
                sum_M_real_V_fu_78 <= sum_M_real_V_4_fu_461_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln117_reg_525_pp0_iter2_reg = ap_const_lv1_0))) then
                    add_ln121_reg_577(13 downto 3) <= add_ln121_fu_365_p2(13 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                    add_ln121_reg_577_pp0_iter4_reg(13 downto 3) <= add_ln121_reg_577(13 downto 3);
                    add_ln121_reg_577_pp0_iter5_reg(13 downto 3) <= add_ln121_reg_577_pp0_iter4_reg(13 downto 3);
                    add_ln121_reg_577_pp0_iter6_reg(13 downto 3) <= add_ln121_reg_577_pp0_iter5_reg(13 downto 3);
                    add_ln121_reg_577_pp0_iter7_reg(13 downto 3) <= add_ln121_reg_577_pp0_iter6_reg(13 downto 3);
                icmp_ln117_reg_525_pp0_iter2_reg <= icmp_ln117_reg_525_pp0_iter1_reg;
                icmp_ln117_reg_525_pp0_iter3_reg <= icmp_ln117_reg_525_pp0_iter2_reg;
                icmp_ln117_reg_525_pp0_iter4_reg <= icmp_ln117_reg_525_pp0_iter3_reg;
                icmp_ln117_reg_525_pp0_iter5_reg <= icmp_ln117_reg_525_pp0_iter4_reg;
                icmp_ln117_reg_525_pp0_iter6_reg <= icmp_ln117_reg_525_pp0_iter5_reg;
                icmp_ln122_reg_551_pp0_iter2_reg <= icmp_ln122_reg_551_pp0_iter1_reg;
                icmp_ln122_reg_551_pp0_iter3_reg <= icmp_ln122_reg_551_pp0_iter2_reg;
                icmp_ln122_reg_551_pp0_iter4_reg <= icmp_ln122_reg_551_pp0_iter3_reg;
                icmp_ln122_reg_551_pp0_iter5_reg <= icmp_ln122_reg_551_pp0_iter4_reg;
                icmp_ln122_reg_551_pp0_iter6_reg <= icmp_ln122_reg_551_pp0_iter5_reg;
                icmp_ln122_reg_551_pp0_iter7_reg <= icmp_ln122_reg_551_pp0_iter6_reg;
                select_ln118_1_reg_540_pp0_iter2_reg <= select_ln118_1_reg_540_pp0_iter1_reg;
                select_ln118_1_reg_540_pp0_iter3_reg <= select_ln118_1_reg_540_pp0_iter2_reg;
                select_ln118_1_reg_540_pp0_iter4_reg <= select_ln118_1_reg_540_pp0_iter3_reg;
                select_ln118_1_reg_540_pp0_iter5_reg <= select_ln118_1_reg_540_pp0_iter4_reg;
                select_ln118_1_reg_540_pp0_iter6_reg <= select_ln118_1_reg_540_pp0_iter5_reg;
                select_ln118_1_reg_540_pp0_iter7_reg <= select_ln118_1_reg_540_pp0_iter6_reg;
                select_ln118_reg_534_pp0_iter2_reg <= select_ln118_reg_534_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln117_reg_525_pp0_iter3_reg = ap_const_lv1_0))) then
                fft_coeff_M_imag_V_load_reg_617 <= fft_coeff_M_imag_V_q0;
                fft_coeff_M_real_V_load_reg_612 <= fft_coeff_M_real_V_q0;
                r_V_4_reg_607 <= a_M_imag_q0;
                r_V_reg_602 <= a_M_real_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln117_reg_525 <= icmp_ln117_fu_235_p2;
                icmp_ln117_reg_525_pp0_iter1_reg <= icmp_ln117_reg_525;
                icmp_ln118_reg_529_pp0_iter1_reg <= icmp_ln118_reg_529;
                icmp_ln122_reg_551_pp0_iter1_reg <= icmp_ln122_reg_551;
                select_ln118_1_reg_540_pp0_iter1_reg <= select_ln118_1_reg_540;
                select_ln118_reg_534_pp0_iter1_reg <= select_ln118_reg_534;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln117_fu_235_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln118_reg_529 <= icmp_ln118_fu_241_p2;
                icmp_ln122_reg_551 <= icmp_ln122_fu_305_p2;
                select_ln118_reg_534 <= select_ln118_fu_285_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln117_reg_525_pp0_iter5_reg = ap_const_lv1_0))) then
                mul_ln1192_reg_661 <= grp_fu_1150_p_dout0;
                mul_ln1193_reg_651 <= grp_fu_1134_p_dout0;
                mul_ln703_2_reg_656 <= grp_fu_1146_p_dout0;
                mul_ln703_reg_646 <= grp_fu_1130_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln117_reg_525_pp0_iter1_reg = ap_const_lv1_0))) then
                select_ln117_1_reg_565 <= select_ln117_1_fu_337_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln117_fu_235_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln118_1_reg_540 <= select_ln118_1_fu_293_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln117_reg_525_pp0_iter6_reg = ap_const_lv1_0))) then
                sum_M_imag_V_4_reg_671 <= sum_M_imag_V_4_fu_467_p2;
                sum_M_real_V_4_reg_666 <= sum_M_real_V_4_fu_461_p2;
            end if;
        end if;
    end process;
    add_ln121_reg_577(2 downto 0) <= "000";
    add_ln121_reg_577_pp0_iter4_reg(2 downto 0) <= "000";
    add_ln121_reg_577_pp0_iter5_reg(2 downto 0) <= "000";
    add_ln121_reg_577_pp0_iter6_reg(2 downto 0) <= "000";
    add_ln121_reg_577_pp0_iter7_reg(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    a_M_imag_address0 <= zext_ln121_1_fu_385_p1(14 - 1 downto 0);

    a_M_imag_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            a_M_imag_ce0 <= ap_const_logic_1;
        else 
            a_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_M_real_address0 <= zext_ln121_1_fu_385_p1(14 - 1 downto 0);

    a_M_real_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            a_M_real_ce0 <= ap_const_logic_1;
        else 
            a_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln117_1_fu_229_p2 <= std_logic_vector(unsigned(indvar_flatten19_reg_164) + unsigned(ap_const_lv19_1));
    add_ln117_fu_331_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_212_p4) + unsigned(ap_const_lv9_1));
    add_ln118_1_fu_317_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_175) + unsigned(ap_const_lv12_1));
    add_ln118_fu_273_p2 <= std_logic_vector(unsigned(select_ln117_fu_247_p3) + unsigned(ap_const_lv6_1));
    add_ln119_fu_311_p2 <= std_logic_vector(unsigned(select_ln118_fu_285_p3) + unsigned(ap_const_lv6_1));
    add_ln121_1_fu_379_p2 <= std_logic_vector(unsigned(add_ln121_fu_365_p2) + unsigned(zext_ln1118_3_fu_371_p1));
    add_ln121_fu_365_p2 <= std_logic_vector(unsigned(tmp_fu_347_p3) + unsigned(zext_ln121_fu_361_p1));
    and_ln117_fu_267_p2 <= (xor_ln117_fu_255_p2 and icmp_ln119_fu_261_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter2_state4_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_condition_pp0_exit_iter2_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter2_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln117_fu_235_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln117_fu_235_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_212_p4_assign_proc : process(i_reg_208, icmp_ln117_reg_525_pp0_iter2_reg, select_ln117_1_reg_565, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln117_reg_525_pp0_iter2_reg = ap_const_lv1_0))) then 
            ap_phi_mux_i_phi_fu_212_p4 <= select_ln117_1_reg_565;
        else 
            ap_phi_mux_i_phi_fu_212_p4 <= i_reg_208;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_190_p4_assign_proc : process(j_reg_186, ap_CS_fsm_pp0_stage0, icmp_ln117_reg_525, select_ln118_1_reg_540, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln117_reg_525 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_j_phi_fu_190_p4 <= select_ln118_1_reg_540;
        else 
            ap_phi_mux_j_phi_fu_190_p4 <= j_reg_186;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_28_fu_486_p2 <= std_logic_vector(unsigned(add_ln121_reg_577_pp0_iter7_reg) + unsigned(zext_ln1118_fu_483_p1));
    fft_coeff_M_imag_V_address0 <= zext_ln1118_5_fu_374_p1(11 - 1 downto 0);

    fft_coeff_M_imag_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            fft_coeff_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            fft_coeff_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fft_coeff_M_real_V_address0 <= zext_ln1118_5_fu_374_p1(11 - 1 downto 0);

    fft_coeff_M_real_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            fft_coeff_M_real_V_ce0 <= ap_const_logic_1;
        else 
            fft_coeff_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1130_p_ce <= ap_const_logic_1;
    grp_fu_1130_p_din0 <= sext_ln1118_fu_391_p1(10 - 1 downto 0);
    grp_fu_1130_p_din1 <= sext_ln1118_7_fu_394_p1(32 - 1 downto 0);
    grp_fu_1134_p_ce <= ap_const_logic_1;
    grp_fu_1134_p_din0 <= sext_ln1118_8_fu_397_p1(10 - 1 downto 0);
    grp_fu_1134_p_din1 <= sext_ln1118_9_fu_400_p1(32 - 1 downto 0);
    grp_fu_1146_p_ce <= ap_const_logic_1;
    grp_fu_1146_p_din0 <= sext_ln1118_8_fu_397_p1(10 - 1 downto 0);
    grp_fu_1146_p_din1 <= sext_ln1118_7_fu_394_p1(32 - 1 downto 0);
    grp_fu_1150_p_ce <= ap_const_logic_1;
    grp_fu_1150_p_din0 <= sext_ln1118_fu_391_p1(10 - 1 downto 0);
    grp_fu_1150_p_din1 <= sext_ln1118_9_fu_400_p1(32 - 1 downto 0);
    grp_fu_403_ce <= ap_const_logic_1;
    grp_fu_403_p0 <= sext_ln1118_fu_391_p1(10 - 1 downto 0);
    grp_fu_403_p1 <= sext_ln1118_7_fu_394_p1(32 - 1 downto 0);
    grp_fu_403_p2 <= grp_fu_1130_p_dout0;
    grp_fu_409_ce <= ap_const_logic_1;
    grp_fu_409_p0 <= sext_ln1118_8_fu_397_p1(10 - 1 downto 0);
    grp_fu_409_p1 <= sext_ln1118_9_fu_400_p1(32 - 1 downto 0);
    grp_fu_409_p2 <= grp_fu_1134_p_dout0;
    grp_fu_415_ce <= ap_const_logic_1;
    grp_fu_415_p0 <= sext_ln1118_8_fu_397_p1(10 - 1 downto 0);
    grp_fu_415_p1 <= sext_ln1118_7_fu_394_p1(32 - 1 downto 0);
    grp_fu_415_p2 <= grp_fu_1146_p_dout0;
    grp_fu_421_ce <= ap_const_logic_1;
    grp_fu_421_p0 <= sext_ln1118_fu_391_p1(10 - 1 downto 0);
    grp_fu_421_p1 <= sext_ln1118_9_fu_400_p1(32 - 1 downto 0);
    grp_fu_421_p2 <= grp_fu_1150_p_dout0;
    grp_fu_497_p0 <= grp_fu_497_p00(6 - 1 downto 0);
    grp_fu_497_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln118_1_fu_293_p3),11));
    grp_fu_497_p1 <= ap_const_lv11_27(7 - 1 downto 0);
    grp_fu_497_p2 <= grp_fu_497_p20(6 - 1 downto 0);
    grp_fu_497_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln118_reg_534_pp0_iter1_reg),11));
    icmp_ln117_fu_235_p2 <= "1" when (indvar_flatten19_reg_164 = ap_const_lv19_4E400) else "0";
    icmp_ln118_fu_241_p2 <= "1" when (indvar_flatten_reg_175 = ap_const_lv12_400) else "0";
    icmp_ln119_fu_261_p2 <= "1" when (k_reg_197 = ap_const_lv6_20) else "0";
    icmp_ln122_fu_305_p2 <= "1" when (select_ln118_fu_285_p3 = ap_const_lv6_1F) else "0";
    or_ln118_fu_279_p2 <= (icmp_ln118_fu_241_p2 or and_ln117_fu_267_p2);
    out_M_imag_address0 <= p_cast_fu_491_p1(14 - 1 downto 0);

    out_M_imag_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            out_M_imag_ce0 <= ap_const_logic_1;
        else 
            out_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_M_imag_d0 <= sum_M_imag_V_4_reg_671;

    out_M_imag_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln122_reg_551_pp0_iter7_reg, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln122_reg_551_pp0_iter7_reg = ap_const_lv1_1))) then 
            out_M_imag_we0 <= ap_const_logic_1;
        else 
            out_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_M_real_address0 <= p_cast_fu_491_p1(14 - 1 downto 0);

    out_M_real_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            out_M_real_ce0 <= ap_const_logic_1;
        else 
            out_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_M_real_d0 <= sum_M_real_V_4_reg_666;

    out_M_real_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln122_reg_551_pp0_iter7_reg, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln122_reg_551_pp0_iter7_reg = ap_const_lv1_1))) then 
            out_M_real_we0 <= ap_const_logic_1;
        else 
            out_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_28_fu_486_p2),64));
    p_r_V_fu_437_p4 <= ret_V_fu_433_p2(39 downto 8);
    ret_V_2_fu_447_p2 <= std_logic_vector(unsigned(mul_ln703_2_reg_656) + unsigned(mul_ln1192_reg_661));
    ret_V_fu_433_p2 <= std_logic_vector(unsigned(mul_ln703_reg_646) - unsigned(mul_ln1193_reg_651));
    select_ln117_1_fu_337_p3 <= 
        add_ln117_fu_331_p2 when (icmp_ln118_reg_529_pp0_iter1_reg(0) = '1') else 
        ap_phi_mux_i_phi_fu_212_p4;
    select_ln117_fu_247_p3 <= 
        ap_const_lv6_0 when (icmp_ln118_fu_241_p2(0) = '1') else 
        ap_phi_mux_j_phi_fu_190_p4;
    select_ln118_1_fu_293_p3 <= 
        add_ln118_fu_273_p2 when (and_ln117_fu_267_p2(0) = '1') else 
        select_ln117_fu_247_p3;
    select_ln118_2_fu_323_p3 <= 
        ap_const_lv12_1 when (icmp_ln118_fu_241_p2(0) = '1') else 
        add_ln118_1_fu_317_p2;
    select_ln118_fu_285_p3 <= 
        ap_const_lv6_0 when (or_ln118_fu_279_p2(0) = '1') else 
        k_reg_197;
        sext_ln1118_7_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_reg_602),40));

        sext_ln1118_8_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(fft_coeff_M_imag_V_load_reg_617),40));

        sext_ln1118_9_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_4_reg_607),40));

        sext_ln1118_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(fft_coeff_M_real_V_load_reg_612),40));

    sum_M_imag_V_4_fu_467_p2 <= std_logic_vector(unsigned(trunc_ln_fu_451_p4) + unsigned(sum_M_imag_V_fu_82));
    sum_M_real_V_4_fu_461_p2 <= std_logic_vector(unsigned(p_r_V_fu_437_p4) + unsigned(sum_M_real_V_fu_78));
    tmp_fu_347_p3 <= (select_ln117_1_reg_565 & ap_const_lv5_0);
    tmp_s_fu_354_p3 <= (select_ln117_1_reg_565 & ap_const_lv3_0);
    trunc_ln_fu_451_p4 <= ret_V_2_fu_447_p2(39 downto 8);
    xor_ln117_fu_255_p2 <= (icmp_ln118_fu_241_p2 xor ap_const_lv1_1);
    zext_ln1118_3_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln118_reg_534_pp0_iter2_reg),14));
    zext_ln1118_5_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_497_p3),64));
    zext_ln1118_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln118_1_reg_540_pp0_iter7_reg),14));
    zext_ln121_1_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_1_fu_379_p2),64));
    zext_ln121_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_354_p3),14));
end behav;
