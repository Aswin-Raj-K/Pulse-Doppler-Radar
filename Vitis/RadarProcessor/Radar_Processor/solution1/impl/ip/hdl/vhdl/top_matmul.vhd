-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_matmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_M_real_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    a_M_real_ce0 : OUT STD_LOGIC;
    a_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_M_imag_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    a_M_imag_ce0 : OUT STD_LOGIC;
    a_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_M_real_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_M_real_ce0 : OUT STD_LOGIC;
    out_M_real_we0 : OUT STD_LOGIC;
    out_M_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_M_imag_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_M_imag_ce0 : OUT STD_LOGIC;
    out_M_imag_we0 : OUT STD_LOGIC;
    out_M_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1130_p_din0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    grp_fu_1130_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1130_p_dout0 : IN STD_LOGIC_VECTOR (39 downto 0);
    grp_fu_1130_p_ce : OUT STD_LOGIC;
    grp_fu_1134_p_din0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    grp_fu_1134_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1134_p_dout0 : IN STD_LOGIC_VECTOR (39 downto 0);
    grp_fu_1134_p_ce : OUT STD_LOGIC );
end;


architecture behav of top_matmul is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv19_77358 : STD_LOGIC_VECTOR (18 downto 0) := "1110111001101011000";
    constant ap_const_lv12_618 : STD_LOGIC_VECTOR (11 downto 0) := "011000011000";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv6_27 : STD_LOGIC_VECTOR (5 downto 0) := "100111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv11_27 : STD_LOGIC_VECTOR (10 downto 0) := "00000100111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal pulseCanceler_coeff_M_real_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal pulseCanceler_coeff_M_real_V_ce0 : STD_LOGIC;
    signal pulseCanceler_coeff_M_real_V_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten19_reg_139 : STD_LOGIC_VECTOR (18 downto 0);
    signal indvar_flatten_reg_150 : STD_LOGIC_VECTOR (11 downto 0);
    signal k_reg_161 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_172 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_183 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum_M_imag_V_reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_M_real_V_reg_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln73_1_fu_218_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln73_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_reg_478_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_reg_478_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_reg_478_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_reg_478_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_reg_478_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_reg_478_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_reg_482 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_reg_482_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln73_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln73_reg_488 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln73_reg_488_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln74_fu_260_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln74_reg_493 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln74_reg_493_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln74_reg_493_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln80_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_504 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_504_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_504_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_504_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_504_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_504_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_504_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln75_fu_278_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln74_2_fu_290_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln73_1_fu_311_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln73_1_reg_518 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal select_ln74_1_fu_324_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln74_1_reg_525 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln74_1_reg_525_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln74_1_reg_525_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln74_1_reg_525_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln74_1_reg_525_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln79_fu_353_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln79_reg_536 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln79_reg_536_pp0_iter4_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln79_reg_536_pp0_iter5_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln79_reg_536_pp0_iter6_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln77_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_556 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_556_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_556_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_556_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_reg_562 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_2_reg_567 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulseCanceler_coeff_M_real_V_load_reg_572 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1118_fu_383_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln1118_2_fu_386_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln1118_3_fu_395_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_389_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1115_reg_593 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_398_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1115_2_reg_598 : STD_LOGIC_VECTOR (39 downto 0);
    signal sum_M_real_V_2_fu_450_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal sum_M_imag_V_2_fu_457_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter6_state8 : STD_LOGIC;
    signal ap_phi_mux_i_phi_fu_176_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_j_phi_fu_187_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1118_2_fu_362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln79_1_fu_372_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln75_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln73_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln74_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln74_1_fu_284_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln73_fu_298_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln73_fu_304_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln74_fu_318_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_342_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_335_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln79_fu_349_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_464_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1118_fu_359_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln79_1_fu_366_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_389_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_389_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_398_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_398_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln74_1_cast_fu_404_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_25_fu_407_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_r_V_fu_432_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_M_real_V_1_fu_425_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_441_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_M_imag_V_1_fu_418_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_464_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_464_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_464_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_389_ce : STD_LOGIC;
    signal grp_fu_398_ce : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_464_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_464_p20 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component top_mul_10s_32s_40_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component top_mac_muladd_6ns_7ns_6ns_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component top_matmul_pulseCanceler_coeff_M_real_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    pulseCanceler_coeff_M_real_V_U : component top_matmul_pulseCanceler_coeff_M_real_V
    generic map (
        DataWidth => 10,
        AddressRange => 1560,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pulseCanceler_coeff_M_real_V_address0,
        ce0 => pulseCanceler_coeff_M_real_V_ce0,
        q0 => pulseCanceler_coeff_M_real_V_q0);

    mac_muladd_6ns_7ns_6ns_11_4_1_U3 : component top_mac_muladd_6ns_7ns_6ns_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 6,
        din1_WIDTH => 7,
        din2_WIDTH => 6,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_464_p0,
        din1 => grp_fu_464_p1,
        din2 => grp_fu_464_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_464_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter6_state8)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter6_state8))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter5;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_reg_478_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                i_reg_172 <= select_ln73_1_reg_518;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_172 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten19_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_fu_224_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten19_reg_139 <= add_ln73_1_fu_218_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten19_reg_139 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_fu_224_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_150 <= select_ln74_2_fu_290_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_150 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    j_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_reg_478_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                j_reg_183 <= select_ln74_1_reg_525;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_reg_183 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    k_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_fu_224_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                k_reg_161 <= add_ln75_fu_278_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_reg_161 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    sum_M_imag_V_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln73_reg_478_pp0_iter6_reg = ap_const_lv1_0))) then 
                sum_M_imag_V_reg_194 <= sum_M_imag_V_2_fu_457_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sum_M_imag_V_reg_194 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_M_real_V_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln73_reg_478_pp0_iter6_reg = ap_const_lv1_0))) then 
                sum_M_real_V_reg_206 <= sum_M_real_V_2_fu_450_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sum_M_real_V_reg_206 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_reg_478_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    add_ln79_reg_536(13 downto 3) <= add_ln79_fu_353_p2(13 downto 3);
                icmp_ln77_reg_556 <= icmp_ln77_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                    add_ln79_reg_536_pp0_iter4_reg(13 downto 3) <= add_ln79_reg_536(13 downto 3);
                    add_ln79_reg_536_pp0_iter5_reg(13 downto 3) <= add_ln79_reg_536_pp0_iter4_reg(13 downto 3);
                    add_ln79_reg_536_pp0_iter6_reg(13 downto 3) <= add_ln79_reg_536_pp0_iter5_reg(13 downto 3);
                icmp_ln73_reg_478_pp0_iter2_reg <= icmp_ln73_reg_478_pp0_iter1_reg;
                icmp_ln73_reg_478_pp0_iter3_reg <= icmp_ln73_reg_478_pp0_iter2_reg;
                icmp_ln73_reg_478_pp0_iter4_reg <= icmp_ln73_reg_478_pp0_iter3_reg;
                icmp_ln73_reg_478_pp0_iter5_reg <= icmp_ln73_reg_478_pp0_iter4_reg;
                icmp_ln73_reg_478_pp0_iter6_reg <= icmp_ln73_reg_478_pp0_iter5_reg;
                icmp_ln77_reg_556_pp0_iter4_reg <= icmp_ln77_reg_556;
                icmp_ln77_reg_556_pp0_iter5_reg <= icmp_ln77_reg_556_pp0_iter4_reg;
                icmp_ln77_reg_556_pp0_iter6_reg <= icmp_ln77_reg_556_pp0_iter5_reg;
                icmp_ln80_reg_504_pp0_iter2_reg <= icmp_ln80_reg_504_pp0_iter1_reg;
                icmp_ln80_reg_504_pp0_iter3_reg <= icmp_ln80_reg_504_pp0_iter2_reg;
                icmp_ln80_reg_504_pp0_iter4_reg <= icmp_ln80_reg_504_pp0_iter3_reg;
                icmp_ln80_reg_504_pp0_iter5_reg <= icmp_ln80_reg_504_pp0_iter4_reg;
                icmp_ln80_reg_504_pp0_iter6_reg <= icmp_ln80_reg_504_pp0_iter5_reg;
                select_ln74_1_reg_525_pp0_iter3_reg <= select_ln74_1_reg_525;
                select_ln74_1_reg_525_pp0_iter4_reg <= select_ln74_1_reg_525_pp0_iter3_reg;
                select_ln74_1_reg_525_pp0_iter5_reg <= select_ln74_1_reg_525_pp0_iter4_reg;
                select_ln74_1_reg_525_pp0_iter6_reg <= select_ln74_1_reg_525_pp0_iter5_reg;
                select_ln74_reg_493_pp0_iter2_reg <= select_ln74_reg_493_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_fu_224_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln73_reg_488 <= and_ln73_fu_248_p2;
                icmp_ln74_reg_482 <= icmp_ln74_fu_230_p2;
                icmp_ln80_reg_504 <= icmp_ln80_fu_272_p2;
                select_ln74_reg_493 <= select_ln74_fu_260_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln73_reg_488_pp0_iter1_reg <= and_ln73_reg_488;
                icmp_ln73_reg_478 <= icmp_ln73_fu_224_p2;
                icmp_ln73_reg_478_pp0_iter1_reg <= icmp_ln73_reg_478;
                icmp_ln74_reg_482_pp0_iter1_reg <= icmp_ln74_reg_482;
                icmp_ln80_reg_504_pp0_iter1_reg <= icmp_ln80_reg_504;
                select_ln74_reg_493_pp0_iter1_reg <= select_ln74_reg_493;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln73_reg_478_pp0_iter5_reg = ap_const_lv1_0))) then
                mul_ln1115_2_reg_598 <= grp_fu_1134_p_dout0;
                mul_ln1115_reg_593 <= grp_fu_1130_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_reg_478_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                pulseCanceler_coeff_M_real_V_load_reg_572 <= pulseCanceler_coeff_M_real_V_q0;
                r_V_2_reg_567 <= a_M_imag_q0;
                r_V_reg_562 <= a_M_real_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_reg_478_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                select_ln73_1_reg_518 <= select_ln73_1_fu_311_p3;
                select_ln74_1_reg_525 <= select_ln74_1_fu_324_p3;
            end if;
        end if;
    end process;
    add_ln79_reg_536(2 downto 0) <= "000";
    add_ln79_reg_536_pp0_iter4_reg(2 downto 0) <= "000";
    add_ln79_reg_536_pp0_iter5_reg(2 downto 0) <= "000";
    add_ln79_reg_536_pp0_iter6_reg(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    a_M_imag_address0 <= zext_ln79_1_fu_372_p1(14 - 1 downto 0);

    a_M_imag_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            a_M_imag_ce0 <= ap_const_logic_1;
        else 
            a_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_M_real_address0 <= zext_ln79_1_fu_372_p1(14 - 1 downto 0);

    a_M_real_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            a_M_real_ce0 <= ap_const_logic_1;
        else 
            a_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln73_1_fu_218_p2 <= std_logic_vector(unsigned(indvar_flatten19_reg_139) + unsigned(ap_const_lv19_1));
    add_ln73_fu_298_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_176_p4) + unsigned(ap_const_lv9_1));
    add_ln74_1_fu_284_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_150) + unsigned(ap_const_lv12_1));
    add_ln74_fu_318_p2 <= std_logic_vector(unsigned(select_ln73_fu_304_p3) + unsigned(ap_const_lv6_1));
    add_ln75_fu_278_p2 <= std_logic_vector(unsigned(select_ln74_fu_260_p3) + unsigned(ap_const_lv6_1));
    add_ln79_1_fu_366_p2 <= std_logic_vector(unsigned(add_ln79_fu_353_p2) + unsigned(zext_ln1118_fu_359_p1));
    add_ln79_fu_353_p2 <= std_logic_vector(unsigned(tmp_fu_335_p3) + unsigned(zext_ln79_fu_349_p1));
    and_ln73_fu_248_p2 <= (xor_ln73_fu_236_p2 and icmp_ln75_fu_242_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter6_state8_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter6_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter6_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln73_fu_224_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln73_fu_224_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_176_p4_assign_proc : process(i_reg_172, icmp_ln73_reg_478_pp0_iter2_reg, select_ln73_1_reg_518, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0)
    begin
        if (((icmp_ln73_reg_478_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_phi_mux_i_phi_fu_176_p4 <= select_ln73_1_reg_518;
        else 
            ap_phi_mux_i_phi_fu_176_p4 <= i_reg_172;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_187_p4_assign_proc : process(j_reg_183, icmp_ln73_reg_478_pp0_iter2_reg, select_ln74_1_reg_525, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0)
    begin
        if (((icmp_ln73_reg_478_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_phi_mux_j_phi_fu_187_p4 <= select_ln74_1_reg_525;
        else 
            ap_phi_mux_j_phi_fu_187_p4 <= j_reg_183;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_25_fu_407_p2 <= std_logic_vector(unsigned(add_ln79_reg_536_pp0_iter6_reg) + unsigned(select_ln74_1_cast_fu_404_p1));
    grp_fu_1130_p_ce <= ap_const_logic_1;
    grp_fu_1130_p_din0 <= sext_ln1118_fu_383_p1(10 - 1 downto 0);
    grp_fu_1130_p_din1 <= sext_ln1118_2_fu_386_p1(32 - 1 downto 0);
    grp_fu_1134_p_ce <= ap_const_logic_1;
    grp_fu_1134_p_din0 <= sext_ln1118_fu_383_p1(10 - 1 downto 0);
    grp_fu_1134_p_din1 <= sext_ln1118_3_fu_395_p1(32 - 1 downto 0);
    grp_fu_389_ce <= ap_const_logic_1;
    grp_fu_389_p0 <= sext_ln1118_fu_383_p1(10 - 1 downto 0);
    grp_fu_389_p1 <= sext_ln1118_2_fu_386_p1(32 - 1 downto 0);
    grp_fu_389_p2 <= grp_fu_1130_p_dout0;
    grp_fu_398_ce <= ap_const_logic_1;
    grp_fu_398_p0 <= sext_ln1118_fu_383_p1(10 - 1 downto 0);
    grp_fu_398_p1 <= sext_ln1118_3_fu_395_p1(32 - 1 downto 0);
    grp_fu_398_p2 <= grp_fu_1134_p_dout0;
    grp_fu_464_p0 <= grp_fu_464_p00(6 - 1 downto 0);
    grp_fu_464_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln74_fu_260_p3),11));
    grp_fu_464_p1 <= ap_const_lv11_27(7 - 1 downto 0);
    grp_fu_464_p2 <= grp_fu_464_p20(6 - 1 downto 0);
    grp_fu_464_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln74_1_fu_324_p3),11));
    icmp_ln73_fu_224_p2 <= "1" when (indvar_flatten19_reg_139 = ap_const_lv19_77358) else "0";
    icmp_ln74_fu_230_p2 <= "1" when (indvar_flatten_reg_150 = ap_const_lv12_618) else "0";
    icmp_ln75_fu_242_p2 <= "1" when (k_reg_161 = ap_const_lv6_28) else "0";
    icmp_ln77_fu_378_p2 <= "1" when (select_ln74_reg_493_pp0_iter2_reg = ap_const_lv6_0) else "0";
    icmp_ln80_fu_272_p2 <= "1" when (select_ln74_fu_260_p3 = ap_const_lv6_27) else "0";
    or_ln74_fu_254_p2 <= (icmp_ln74_fu_230_p2 or and_ln73_fu_248_p2);
    out_M_imag_address0 <= p_cast_fu_412_p1(14 - 1 downto 0);

    out_M_imag_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            out_M_imag_ce0 <= ap_const_logic_1;
        else 
            out_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_M_imag_d0 <= std_logic_vector(unsigned(trunc_ln_fu_441_p4) + unsigned(sum_M_imag_V_1_fu_418_p3));

    out_M_imag_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln80_reg_504_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln80_reg_504_pp0_iter6_reg = ap_const_lv1_1))) then 
            out_M_imag_we0 <= ap_const_logic_1;
        else 
            out_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_M_real_address0 <= p_cast_fu_412_p1(14 - 1 downto 0);

    out_M_real_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            out_M_real_ce0 <= ap_const_logic_1;
        else 
            out_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_M_real_d0 <= std_logic_vector(unsigned(p_r_V_fu_432_p4) + unsigned(sum_M_real_V_1_fu_425_p3));

    out_M_real_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln80_reg_504_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln80_reg_504_pp0_iter6_reg = ap_const_lv1_1))) then 
            out_M_real_we0 <= ap_const_logic_1;
        else 
            out_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_25_fu_407_p2),64));
    p_r_V_fu_432_p4 <= mul_ln1115_reg_593(39 downto 8);
    pulseCanceler_coeff_M_real_V_address0 <= zext_ln1118_2_fu_362_p1(11 - 1 downto 0);

    pulseCanceler_coeff_M_real_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            pulseCanceler_coeff_M_real_V_ce0 <= ap_const_logic_1;
        else 
            pulseCanceler_coeff_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln73_1_fu_311_p3 <= 
        add_ln73_fu_298_p2 when (icmp_ln74_reg_482_pp0_iter1_reg(0) = '1') else 
        ap_phi_mux_i_phi_fu_176_p4;
    select_ln73_fu_304_p3 <= 
        ap_const_lv6_0 when (icmp_ln74_reg_482_pp0_iter1_reg(0) = '1') else 
        ap_phi_mux_j_phi_fu_187_p4;
    select_ln74_1_cast_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln74_1_reg_525_pp0_iter6_reg),14));
    select_ln74_1_fu_324_p3 <= 
        add_ln74_fu_318_p2 when (and_ln73_reg_488_pp0_iter1_reg(0) = '1') else 
        select_ln73_fu_304_p3;
    select_ln74_2_fu_290_p3 <= 
        ap_const_lv12_1 when (icmp_ln74_fu_230_p2(0) = '1') else 
        add_ln74_1_fu_284_p2;
    select_ln74_fu_260_p3 <= 
        ap_const_lv6_0 when (or_ln74_fu_254_p2(0) = '1') else 
        k_reg_161;
        sext_ln1118_2_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_reg_562),40));

        sext_ln1118_3_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_2_reg_567),40));

        sext_ln1118_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pulseCanceler_coeff_M_real_V_load_reg_572),40));

    sum_M_imag_V_1_fu_418_p3 <= 
        ap_const_lv32_0 when (icmp_ln77_reg_556_pp0_iter6_reg(0) = '1') else 
        sum_M_imag_V_reg_194;
    sum_M_imag_V_2_fu_457_p2 <= std_logic_vector(unsigned(trunc_ln_fu_441_p4) + unsigned(sum_M_imag_V_1_fu_418_p3));
    sum_M_real_V_1_fu_425_p3 <= 
        ap_const_lv32_0 when (icmp_ln77_reg_556_pp0_iter6_reg(0) = '1') else 
        sum_M_real_V_reg_206;
    sum_M_real_V_2_fu_450_p2 <= std_logic_vector(unsigned(p_r_V_fu_432_p4) + unsigned(sum_M_real_V_1_fu_425_p3));
    tmp_6_fu_342_p3 <= (select_ln73_1_reg_518 & ap_const_lv3_0);
    tmp_fu_335_p3 <= (select_ln73_1_reg_518 & ap_const_lv5_0);
    trunc_ln_fu_441_p4 <= mul_ln1115_2_reg_598(39 downto 8);
    xor_ln73_fu_236_p2 <= (icmp_ln74_fu_230_p2 xor ap_const_lv1_1);
    zext_ln1118_2_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_464_p3),64));
    zext_ln1118_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln74_reg_493_pp0_iter2_reg),14));
    zext_ln79_1_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_1_fu_366_p2),64));
    zext_ln79_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_342_p3),14));
end behav;
