-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity top_matmul_pulseCanceler_coeff_M_real_V_rom is 
    generic(
             DWIDTH     : integer := 10; 
             AWIDTH     : integer := 11; 
             MEM_SIZE    : integer := 1560
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of top_matmul_pulseCanceler_coeff_M_real_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0100000000", 1 to 37=> "0000000000", 38 => "0100000000", 39 => "1000000000", 
    40 => "0100000000", 41 to 77=> "0000000000", 78 => "0100000000", 79 => "1000000000", 
    80 => "0100000000", 81 to 117=> "0000000000", 118 => "0100000000", 119 => "1000000000", 
    120 => "0100000000", 121 to 157=> "0000000000", 158 => "0100000000", 159 => "1000000000", 
    160 => "0100000000", 161 to 197=> "0000000000", 198 => "0100000000", 199 => "1000000000", 
    200 => "0100000000", 201 to 237=> "0000000000", 238 => "0100000000", 239 => "1000000000", 
    240 => "0100000000", 241 to 277=> "0000000000", 278 => "0100000000", 279 => "1000000000", 
    280 => "0100000000", 281 to 317=> "0000000000", 318 => "0100000000", 319 => "1000000000", 
    320 => "0100000000", 321 to 357=> "0000000000", 358 => "0100000000", 359 => "1000000000", 
    360 => "0100000000", 361 to 397=> "0000000000", 398 => "0100000000", 399 => "1000000000", 
    400 => "0100000000", 401 to 437=> "0000000000", 438 => "0100000000", 439 => "1000000000", 
    440 => "0100000000", 441 to 477=> "0000000000", 478 => "0100000000", 479 => "1000000000", 
    480 => "0100000000", 481 to 517=> "0000000000", 518 => "0100000000", 519 => "1000000000", 
    520 => "0100000000", 521 to 557=> "0000000000", 558 => "0100000000", 559 => "1000000000", 
    560 => "0100000000", 561 to 597=> "0000000000", 598 => "0100000000", 599 => "1000000000", 
    600 => "0100000000", 601 to 637=> "0000000000", 638 => "0100000000", 639 => "1000000000", 
    640 => "0100000000", 641 to 677=> "0000000000", 678 => "0100000000", 679 => "1000000000", 
    680 => "0100000000", 681 to 717=> "0000000000", 718 => "0100000000", 719 => "1000000000", 
    720 => "0100000000", 721 to 757=> "0000000000", 758 => "0100000000", 759 => "1000000000", 
    760 => "0100000000", 761 to 797=> "0000000000", 798 => "0100000000", 799 => "1000000000", 
    800 => "0100000000", 801 to 837=> "0000000000", 838 => "0100000000", 839 => "1000000000", 
    840 => "0100000000", 841 to 877=> "0000000000", 878 => "0100000000", 879 => "1000000000", 
    880 => "0100000000", 881 to 917=> "0000000000", 918 => "0100000000", 919 => "1000000000", 
    920 => "0100000000", 921 to 957=> "0000000000", 958 => "0100000000", 959 => "1000000000", 
    960 => "0100000000", 961 to 997=> "0000000000", 998 => "0100000000", 999 => "1000000000", 
    1000 => "0100000000", 1001 to 1037=> "0000000000", 1038 => "0100000000", 1039 => "1000000000", 
    1040 => "0100000000", 1041 to 1077=> "0000000000", 1078 => "0100000000", 1079 => "1000000000", 
    1080 => "0100000000", 1081 to 1117=> "0000000000", 1118 => "0100000000", 1119 => "1000000000", 
    1120 => "0100000000", 1121 to 1157=> "0000000000", 1158 => "0100000000", 1159 => "1000000000", 
    1160 => "0100000000", 1161 to 1197=> "0000000000", 1198 => "0100000000", 1199 => "1000000000", 
    1200 => "0100000000", 1201 to 1237=> "0000000000", 1238 => "0100000000", 1239 => "1000000000", 
    1240 => "0100000000", 1241 to 1277=> "0000000000", 1278 => "0100000000", 1279 => "1000000000", 
    1280 => "0100000000", 1281 to 1317=> "0000000000", 1318 => "0100000000", 1319 => "1000000000", 
    1320 => "0100000000", 1321 to 1357=> "0000000000", 1358 => "0100000000", 1359 => "1000000000", 
    1360 => "0100000000", 1361 to 1397=> "0000000000", 1398 => "0100000000", 1399 => "1000000000", 
    1400 => "0100000000", 1401 to 1437=> "0000000000", 1438 => "0100000000", 1439 => "1000000000", 
    1440 => "0100000000", 1441 to 1477=> "0000000000", 1478 => "0100000000", 1479 => "1000000000", 
    1480 => "0100000000", 1481 to 1517=> "0000000000", 1518 => "0100000000", 1519 => "1000000000", 
    1520 => "0100000000", 1521 to 1557=> "0000000000", 1558 => "0100000000", 1559 => "1000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity top_matmul_pulseCanceler_coeff_M_real_V is
    generic (
        DataWidth : INTEGER := 10;
        AddressRange : INTEGER := 1560;
        AddressWidth : INTEGER := 11);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of top_matmul_pulseCanceler_coeff_M_real_V is
    component top_matmul_pulseCanceler_coeff_M_real_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    top_matmul_pulseCanceler_coeff_M_real_V_rom_U :  component top_matmul_pulseCanceler_coeff_M_real_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


