// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_matmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_M_real_address0,
        a_M_real_ce0,
        a_M_real_q0,
        a_M_imag_address0,
        a_M_imag_ce0,
        a_M_imag_q0,
        out_M_real_address0,
        out_M_real_ce0,
        out_M_real_we0,
        out_M_real_d0,
        out_M_imag_address0,
        out_M_imag_ce0,
        out_M_imag_we0,
        out_M_imag_d0,
        grp_fu_1130_p_din0,
        grp_fu_1130_p_din1,
        grp_fu_1130_p_dout0,
        grp_fu_1130_p_ce,
        grp_fu_1134_p_din0,
        grp_fu_1134_p_din1,
        grp_fu_1134_p_dout0,
        grp_fu_1134_p_ce
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state10 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] a_M_real_address0;
output   a_M_real_ce0;
input  [31:0] a_M_real_q0;
output  [13:0] a_M_imag_address0;
output   a_M_imag_ce0;
input  [31:0] a_M_imag_q0;
output  [13:0] out_M_real_address0;
output   out_M_real_ce0;
output   out_M_real_we0;
output  [31:0] out_M_real_d0;
output  [13:0] out_M_imag_address0;
output   out_M_imag_ce0;
output   out_M_imag_we0;
output  [31:0] out_M_imag_d0;
output  [9:0] grp_fu_1130_p_din0;
output  [31:0] grp_fu_1130_p_din1;
input  [39:0] grp_fu_1130_p_dout0;
output   grp_fu_1130_p_ce;
output  [9:0] grp_fu_1134_p_din0;
output  [31:0] grp_fu_1134_p_din1;
input  [39:0] grp_fu_1134_p_dout0;
output   grp_fu_1134_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_M_real_ce0;
reg a_M_imag_ce0;
reg out_M_real_ce0;
reg out_M_real_we0;
reg out_M_imag_ce0;
reg out_M_imag_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] pulseCanceler_coeff_M_real_V_address0;
reg    pulseCanceler_coeff_M_real_V_ce0;
wire   [9:0] pulseCanceler_coeff_M_real_V_q0;
reg   [18:0] indvar_flatten19_reg_139;
reg   [11:0] indvar_flatten_reg_150;
reg   [5:0] k_reg_161;
reg   [8:0] i_reg_172;
reg   [5:0] j_reg_183;
reg   [31:0] sum_M_imag_V_reg_194;
reg   [31:0] sum_M_real_V_reg_206;
wire   [18:0] add_ln73_1_fu_218_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln73_fu_224_p2;
reg   [0:0] icmp_ln73_reg_478;
reg   [0:0] icmp_ln73_reg_478_pp0_iter1_reg;
reg   [0:0] icmp_ln73_reg_478_pp0_iter2_reg;
reg   [0:0] icmp_ln73_reg_478_pp0_iter3_reg;
reg   [0:0] icmp_ln73_reg_478_pp0_iter4_reg;
reg   [0:0] icmp_ln73_reg_478_pp0_iter5_reg;
reg   [0:0] icmp_ln73_reg_478_pp0_iter6_reg;
wire   [0:0] icmp_ln74_fu_230_p2;
reg   [0:0] icmp_ln74_reg_482;
reg   [0:0] icmp_ln74_reg_482_pp0_iter1_reg;
wire   [0:0] and_ln73_fu_248_p2;
reg   [0:0] and_ln73_reg_488;
reg   [0:0] and_ln73_reg_488_pp0_iter1_reg;
wire   [5:0] select_ln74_fu_260_p3;
reg   [5:0] select_ln74_reg_493;
reg   [5:0] select_ln74_reg_493_pp0_iter1_reg;
reg   [5:0] select_ln74_reg_493_pp0_iter2_reg;
wire   [0:0] icmp_ln80_fu_272_p2;
reg   [0:0] icmp_ln80_reg_504;
reg   [0:0] icmp_ln80_reg_504_pp0_iter1_reg;
reg   [0:0] icmp_ln80_reg_504_pp0_iter2_reg;
reg   [0:0] icmp_ln80_reg_504_pp0_iter3_reg;
reg   [0:0] icmp_ln80_reg_504_pp0_iter4_reg;
reg   [0:0] icmp_ln80_reg_504_pp0_iter5_reg;
reg   [0:0] icmp_ln80_reg_504_pp0_iter6_reg;
wire   [5:0] add_ln75_fu_278_p2;
wire   [11:0] select_ln74_2_fu_290_p3;
wire   [8:0] select_ln73_1_fu_311_p3;
reg   [8:0] select_ln73_1_reg_518;
reg    ap_enable_reg_pp0_iter2;
wire   [5:0] select_ln74_1_fu_324_p3;
reg   [5:0] select_ln74_1_reg_525;
reg   [5:0] select_ln74_1_reg_525_pp0_iter3_reg;
reg   [5:0] select_ln74_1_reg_525_pp0_iter4_reg;
reg   [5:0] select_ln74_1_reg_525_pp0_iter5_reg;
reg   [5:0] select_ln74_1_reg_525_pp0_iter6_reg;
wire   [13:0] add_ln79_fu_353_p2;
reg   [13:0] add_ln79_reg_536;
reg   [13:0] add_ln79_reg_536_pp0_iter4_reg;
reg   [13:0] add_ln79_reg_536_pp0_iter5_reg;
reg   [13:0] add_ln79_reg_536_pp0_iter6_reg;
wire   [0:0] icmp_ln77_fu_378_p2;
reg   [0:0] icmp_ln77_reg_556;
reg   [0:0] icmp_ln77_reg_556_pp0_iter4_reg;
reg   [0:0] icmp_ln77_reg_556_pp0_iter5_reg;
reg   [0:0] icmp_ln77_reg_556_pp0_iter6_reg;
reg   [31:0] r_V_reg_562;
reg   [31:0] r_V_2_reg_567;
reg   [9:0] pulseCanceler_coeff_M_real_V_load_reg_572;
wire  signed [39:0] sext_ln1118_fu_383_p1;
wire  signed [39:0] sext_ln1118_2_fu_386_p1;
wire  signed [39:0] sext_ln1118_3_fu_395_p1;
wire   [39:0] grp_fu_389_p2;
reg   [39:0] mul_ln1115_reg_593;
wire   [39:0] grp_fu_398_p2;
reg   [39:0] mul_ln1115_2_reg_598;
wire   [31:0] sum_M_real_V_2_fu_450_p2;
reg    ap_enable_reg_pp0_iter7;
wire   [31:0] sum_M_imag_V_2_fu_457_p2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_condition_pp0_exit_iter6_state8;
reg   [8:0] ap_phi_mux_i_phi_fu_176_p4;
wire    ap_block_pp0_stage0;
reg   [5:0] ap_phi_mux_j_phi_fu_187_p4;
wire   [63:0] zext_ln1118_2_fu_362_p1;
wire   [63:0] zext_ln79_1_fu_372_p1;
wire   [63:0] p_cast_fu_412_p1;
wire   [0:0] icmp_ln75_fu_242_p2;
wire   [0:0] xor_ln73_fu_236_p2;
wire   [0:0] or_ln74_fu_254_p2;
wire   [11:0] add_ln74_1_fu_284_p2;
wire   [8:0] add_ln73_fu_298_p2;
wire   [5:0] select_ln73_fu_304_p3;
wire   [5:0] add_ln74_fu_318_p2;
wire   [11:0] tmp_6_fu_342_p3;
wire   [13:0] tmp_fu_335_p3;
wire   [13:0] zext_ln79_fu_349_p1;
wire   [10:0] grp_fu_464_p3;
wire   [13:0] zext_ln1118_fu_359_p1;
wire   [13:0] add_ln79_1_fu_366_p2;
wire  signed [9:0] grp_fu_389_p0;
wire  signed [31:0] grp_fu_389_p1;
wire  signed [9:0] grp_fu_398_p0;
wire  signed [31:0] grp_fu_398_p1;
wire   [13:0] select_ln74_1_cast_fu_404_p1;
wire   [13:0] empty_25_fu_407_p2;
wire   [31:0] p_r_V_fu_432_p4;
wire   [31:0] sum_M_real_V_1_fu_425_p3;
wire   [31:0] trunc_ln_fu_441_p4;
wire   [31:0] sum_M_imag_V_1_fu_418_p3;
wire   [5:0] grp_fu_464_p0;
wire   [6:0] grp_fu_464_p1;
wire   [5:0] grp_fu_464_p2;
wire    grp_fu_389_ce;
wire    grp_fu_398_ce;
wire    ap_CS_fsm_state10;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [10:0] grp_fu_464_p00;
wire   [10:0] grp_fu_464_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

top_matmul_pulseCanceler_coeff_M_real_V #(
    .DataWidth( 10 ),
    .AddressRange( 1560 ),
    .AddressWidth( 11 ))
pulseCanceler_coeff_M_real_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pulseCanceler_coeff_M_real_V_address0),
    .ce0(pulseCanceler_coeff_M_real_V_ce0),
    .q0(pulseCanceler_coeff_M_real_V_q0)
);

top_mac_muladd_6ns_7ns_6ns_11_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 11 ))
mac_muladd_6ns_7ns_6ns_11_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_464_p0),
    .din1(grp_fu_464_p1),
    .din2(grp_fu_464_p2),
    .ce(1'b1),
    .dout(grp_fu_464_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter6_state8)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter6_state8))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter5;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_reg_478_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        i_reg_172 <= select_ln73_1_reg_518;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_172 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_fu_224_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten19_reg_139 <= add_ln73_1_fu_218_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten19_reg_139 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_fu_224_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_150 <= select_ln74_2_fu_290_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_150 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_reg_478_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        j_reg_183 <= select_ln74_1_reg_525;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_183 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_fu_224_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_reg_161 <= add_ln75_fu_278_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_161 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln73_reg_478_pp0_iter6_reg == 1'd0))) begin
        sum_M_imag_V_reg_194 <= sum_M_imag_V_2_fu_457_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sum_M_imag_V_reg_194 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln73_reg_478_pp0_iter6_reg == 1'd0))) begin
        sum_M_real_V_reg_206 <= sum_M_real_V_2_fu_450_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sum_M_real_V_reg_206 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_reg_478_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln79_reg_536[13 : 3] <= add_ln79_fu_353_p2[13 : 3];
        icmp_ln77_reg_556 <= icmp_ln77_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln79_reg_536_pp0_iter4_reg[13 : 3] <= add_ln79_reg_536[13 : 3];
        add_ln79_reg_536_pp0_iter5_reg[13 : 3] <= add_ln79_reg_536_pp0_iter4_reg[13 : 3];
        add_ln79_reg_536_pp0_iter6_reg[13 : 3] <= add_ln79_reg_536_pp0_iter5_reg[13 : 3];
        icmp_ln73_reg_478_pp0_iter2_reg <= icmp_ln73_reg_478_pp0_iter1_reg;
        icmp_ln73_reg_478_pp0_iter3_reg <= icmp_ln73_reg_478_pp0_iter2_reg;
        icmp_ln73_reg_478_pp0_iter4_reg <= icmp_ln73_reg_478_pp0_iter3_reg;
        icmp_ln73_reg_478_pp0_iter5_reg <= icmp_ln73_reg_478_pp0_iter4_reg;
        icmp_ln73_reg_478_pp0_iter6_reg <= icmp_ln73_reg_478_pp0_iter5_reg;
        icmp_ln77_reg_556_pp0_iter4_reg <= icmp_ln77_reg_556;
        icmp_ln77_reg_556_pp0_iter5_reg <= icmp_ln77_reg_556_pp0_iter4_reg;
        icmp_ln77_reg_556_pp0_iter6_reg <= icmp_ln77_reg_556_pp0_iter5_reg;
        icmp_ln80_reg_504_pp0_iter2_reg <= icmp_ln80_reg_504_pp0_iter1_reg;
        icmp_ln80_reg_504_pp0_iter3_reg <= icmp_ln80_reg_504_pp0_iter2_reg;
        icmp_ln80_reg_504_pp0_iter4_reg <= icmp_ln80_reg_504_pp0_iter3_reg;
        icmp_ln80_reg_504_pp0_iter5_reg <= icmp_ln80_reg_504_pp0_iter4_reg;
        icmp_ln80_reg_504_pp0_iter6_reg <= icmp_ln80_reg_504_pp0_iter5_reg;
        select_ln74_1_reg_525_pp0_iter3_reg <= select_ln74_1_reg_525;
        select_ln74_1_reg_525_pp0_iter4_reg <= select_ln74_1_reg_525_pp0_iter3_reg;
        select_ln74_1_reg_525_pp0_iter5_reg <= select_ln74_1_reg_525_pp0_iter4_reg;
        select_ln74_1_reg_525_pp0_iter6_reg <= select_ln74_1_reg_525_pp0_iter5_reg;
        select_ln74_reg_493_pp0_iter2_reg <= select_ln74_reg_493_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_fu_224_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln73_reg_488 <= and_ln73_fu_248_p2;
        icmp_ln74_reg_482 <= icmp_ln74_fu_230_p2;
        icmp_ln80_reg_504 <= icmp_ln80_fu_272_p2;
        select_ln74_reg_493 <= select_ln74_fu_260_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln73_reg_488_pp0_iter1_reg <= and_ln73_reg_488;
        icmp_ln73_reg_478 <= icmp_ln73_fu_224_p2;
        icmp_ln73_reg_478_pp0_iter1_reg <= icmp_ln73_reg_478;
        icmp_ln74_reg_482_pp0_iter1_reg <= icmp_ln74_reg_482;
        icmp_ln80_reg_504_pp0_iter1_reg <= icmp_ln80_reg_504;
        select_ln74_reg_493_pp0_iter1_reg <= select_ln74_reg_493;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln73_reg_478_pp0_iter5_reg == 1'd0))) begin
        mul_ln1115_2_reg_598 <= grp_fu_1134_p_dout0;
        mul_ln1115_reg_593 <= grp_fu_1130_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_reg_478_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        pulseCanceler_coeff_M_real_V_load_reg_572 <= pulseCanceler_coeff_M_real_V_q0;
        r_V_2_reg_567 <= a_M_imag_q0;
        r_V_reg_562 <= a_M_real_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_reg_478_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        select_ln73_1_reg_518 <= select_ln73_1_fu_311_p3;
        select_ln74_1_reg_525 <= select_ln74_1_fu_324_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        a_M_imag_ce0 = 1'b1;
    end else begin
        a_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        a_M_real_ce0 = 1'b1;
    end else begin
        a_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b0))) begin
        ap_condition_pp0_exit_iter6_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter6_state8 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln73_fu_224_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln73_reg_478_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_176_p4 = select_ln73_1_reg_518;
    end else begin
        ap_phi_mux_i_phi_fu_176_p4 = i_reg_172;
    end
end

always @ (*) begin
    if (((icmp_ln73_reg_478_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_mux_j_phi_fu_187_p4 = select_ln74_1_reg_525;
    end else begin
        ap_phi_mux_j_phi_fu_187_p4 = j_reg_183;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        out_M_imag_ce0 = 1'b1;
    end else begin
        out_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln80_reg_504_pp0_iter6_reg == 1'd1))) begin
        out_M_imag_we0 = 1'b1;
    end else begin
        out_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        out_M_real_ce0 = 1'b1;
    end else begin
        out_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln80_reg_504_pp0_iter6_reg == 1'd1))) begin
        out_M_real_we0 = 1'b1;
    end else begin
        out_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        pulseCanceler_coeff_M_real_V_ce0 = 1'b1;
    end else begin
        pulseCanceler_coeff_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_M_imag_address0 = zext_ln79_1_fu_372_p1;

assign a_M_real_address0 = zext_ln79_1_fu_372_p1;

assign add_ln73_1_fu_218_p2 = (indvar_flatten19_reg_139 + 19'd1);

assign add_ln73_fu_298_p2 = (ap_phi_mux_i_phi_fu_176_p4 + 9'd1);

assign add_ln74_1_fu_284_p2 = (indvar_flatten_reg_150 + 12'd1);

assign add_ln74_fu_318_p2 = (select_ln73_fu_304_p3 + 6'd1);

assign add_ln75_fu_278_p2 = (select_ln74_fu_260_p3 + 6'd1);

assign add_ln79_1_fu_366_p2 = (add_ln79_fu_353_p2 + zext_ln1118_fu_359_p1);

assign add_ln79_fu_353_p2 = (tmp_fu_335_p3 + zext_ln79_fu_349_p1);

assign and_ln73_fu_248_p2 = (xor_ln73_fu_236_p2 & icmp_ln75_fu_242_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_25_fu_407_p2 = (add_ln79_reg_536_pp0_iter6_reg + select_ln74_1_cast_fu_404_p1);

assign grp_fu_1130_p_ce = 1'b1;

assign grp_fu_1130_p_din0 = sext_ln1118_fu_383_p1;

assign grp_fu_1130_p_din1 = sext_ln1118_2_fu_386_p1;

assign grp_fu_1134_p_ce = 1'b1;

assign grp_fu_1134_p_din0 = sext_ln1118_fu_383_p1;

assign grp_fu_1134_p_din1 = sext_ln1118_3_fu_395_p1;

assign grp_fu_389_ce = 1'b1;

assign grp_fu_389_p0 = sext_ln1118_fu_383_p1;

assign grp_fu_389_p1 = sext_ln1118_2_fu_386_p1;

assign grp_fu_389_p2 = grp_fu_1130_p_dout0;

assign grp_fu_398_ce = 1'b1;

assign grp_fu_398_p0 = sext_ln1118_fu_383_p1;

assign grp_fu_398_p1 = sext_ln1118_3_fu_395_p1;

assign grp_fu_398_p2 = grp_fu_1134_p_dout0;

assign grp_fu_464_p0 = grp_fu_464_p00;

assign grp_fu_464_p00 = select_ln74_fu_260_p3;

assign grp_fu_464_p1 = 11'd39;

assign grp_fu_464_p2 = grp_fu_464_p20;

assign grp_fu_464_p20 = select_ln74_1_fu_324_p3;

assign icmp_ln73_fu_224_p2 = ((indvar_flatten19_reg_139 == 19'd488280) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_230_p2 = ((indvar_flatten_reg_150 == 12'd1560) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_242_p2 = ((k_reg_161 == 6'd40) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_378_p2 = ((select_ln74_reg_493_pp0_iter2_reg == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_272_p2 = ((select_ln74_fu_260_p3 == 6'd39) ? 1'b1 : 1'b0);

assign or_ln74_fu_254_p2 = (icmp_ln74_fu_230_p2 | and_ln73_fu_248_p2);

assign out_M_imag_address0 = p_cast_fu_412_p1;

assign out_M_imag_d0 = (trunc_ln_fu_441_p4 + sum_M_imag_V_1_fu_418_p3);

assign out_M_real_address0 = p_cast_fu_412_p1;

assign out_M_real_d0 = (p_r_V_fu_432_p4 + sum_M_real_V_1_fu_425_p3);

assign p_cast_fu_412_p1 = empty_25_fu_407_p2;

assign p_r_V_fu_432_p4 = {{mul_ln1115_reg_593[39:8]}};

assign pulseCanceler_coeff_M_real_V_address0 = zext_ln1118_2_fu_362_p1;

assign select_ln73_1_fu_311_p3 = ((icmp_ln74_reg_482_pp0_iter1_reg[0:0] == 1'b1) ? add_ln73_fu_298_p2 : ap_phi_mux_i_phi_fu_176_p4);

assign select_ln73_fu_304_p3 = ((icmp_ln74_reg_482_pp0_iter1_reg[0:0] == 1'b1) ? 6'd0 : ap_phi_mux_j_phi_fu_187_p4);

assign select_ln74_1_cast_fu_404_p1 = select_ln74_1_reg_525_pp0_iter6_reg;

assign select_ln74_1_fu_324_p3 = ((and_ln73_reg_488_pp0_iter1_reg[0:0] == 1'b1) ? add_ln74_fu_318_p2 : select_ln73_fu_304_p3);

assign select_ln74_2_fu_290_p3 = ((icmp_ln74_fu_230_p2[0:0] == 1'b1) ? 12'd1 : add_ln74_1_fu_284_p2);

assign select_ln74_fu_260_p3 = ((or_ln74_fu_254_p2[0:0] == 1'b1) ? 6'd0 : k_reg_161);

assign sext_ln1118_2_fu_386_p1 = $signed(r_V_reg_562);

assign sext_ln1118_3_fu_395_p1 = $signed(r_V_2_reg_567);

assign sext_ln1118_fu_383_p1 = $signed(pulseCanceler_coeff_M_real_V_load_reg_572);

assign sum_M_imag_V_1_fu_418_p3 = ((icmp_ln77_reg_556_pp0_iter6_reg[0:0] == 1'b1) ? 32'd0 : sum_M_imag_V_reg_194);

assign sum_M_imag_V_2_fu_457_p2 = (trunc_ln_fu_441_p4 + sum_M_imag_V_1_fu_418_p3);

assign sum_M_real_V_1_fu_425_p3 = ((icmp_ln77_reg_556_pp0_iter6_reg[0:0] == 1'b1) ? 32'd0 : sum_M_real_V_reg_206);

assign sum_M_real_V_2_fu_450_p2 = (p_r_V_fu_432_p4 + sum_M_real_V_1_fu_425_p3);

assign tmp_6_fu_342_p3 = {{select_ln73_1_reg_518}, {3'd0}};

assign tmp_fu_335_p3 = {{select_ln73_1_reg_518}, {5'd0}};

assign trunc_ln_fu_441_p4 = {{mul_ln1115_2_reg_598[39:8]}};

assign xor_ln73_fu_236_p2 = (icmp_ln74_fu_230_p2 ^ 1'd1);

assign zext_ln1118_2_fu_362_p1 = grp_fu_464_p3;

assign zext_ln1118_fu_359_p1 = select_ln74_reg_493_pp0_iter2_reg;

assign zext_ln79_1_fu_372_p1 = add_ln79_1_fu_366_p2;

assign zext_ln79_fu_349_p1 = tmp_6_fu_342_p3;

always @ (posedge ap_clk) begin
    add_ln79_reg_536[2:0] <= 3'b000;
    add_ln79_reg_536_pp0_iter4_reg[2:0] <= 3'b000;
    add_ln79_reg_536_pp0_iter5_reg[2:0] <= 3'b000;
    add_ln79_reg_536_pp0_iter6_reg[2:0] <= 3'b000;
end

endmodule //top_matmul
