-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_matchedFilter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_M_real_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    a_M_real_ce0 : OUT STD_LOGIC;
    a_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_M_imag_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    a_M_imag_ce0 : OUT STD_LOGIC;
    a_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_M_real_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_M_real_ce0 : OUT STD_LOGIC;
    out_M_real_we0 : OUT STD_LOGIC;
    out_M_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_M_imag_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_M_imag_ce0 : OUT STD_LOGIC;
    out_M_imag_we0 : OUT STD_LOGIC;
    out_M_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_739_p_din0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    grp_fu_739_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_739_p_dout0 : IN STD_LOGIC_VECTOR (39 downto 0);
    grp_fu_739_p_ce : OUT STD_LOGIC;
    grp_fu_748_p_din0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    grp_fu_748_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_748_p_dout0 : IN STD_LOGIC_VECTOR (39 downto 0);
    grp_fu_748_p_ce : OUT STD_LOGIC;
    grp_fu_1138_p_din0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    grp_fu_1138_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1138_p_dout0 : IN STD_LOGIC_VECTOR (39 downto 0);
    grp_fu_1138_p_ce : OUT STD_LOGIC;
    grp_fu_1142_p_din0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    grp_fu_1142_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1142_p_dout0 : IN STD_LOGIC_VECTOR (39 downto 0);
    grp_fu_1142_p_ce : OUT STD_LOGIC );
end;


architecture behav of top_matchedFilter is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_lv22_3A4CF7 : STD_LOGIC_VECTOR (21 downto 0) := "1110100100110011110111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv18_17EB1 : STD_LOGIC_VECTOR (17 downto 0) := "010111111010110001";
    constant ap_const_lv9_139 : STD_LOGIC_VECTOR (8 downto 0) := "100111001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_138 : STD_LOGIC_VECTOR (8 downto 0) := "100111000";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_78 : STD_LOGIC_VECTOR (9 downto 0) := "0001111000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal matchedFilter_coeff_M_real_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal matchedFilter_coeff_M_real_V_ce0 : STD_LOGIC;
    signal matchedFilter_coeff_M_real_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal matchedFilter_coeff_M_imag_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal matchedFilter_coeff_M_imag_V_ce0 : STD_LOGIC;
    signal matchedFilter_coeff_M_imag_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten21_reg_164 : STD_LOGIC_VECTOR (21 downto 0);
    signal k_reg_175 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_reg_186 : STD_LOGIC_VECTOR (17 downto 0);
    signal i_reg_197 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_208 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln90_1_fu_229_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln90_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_reg_564 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_reg_564_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_reg_564_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_reg_564_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_reg_564_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln90_1_fu_261_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln90_1_reg_568 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln91_fu_299_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln91_reg_574 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln91_1_fu_307_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln91_1_reg_581 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln91_1_reg_581_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln91_1_reg_581_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln91_1_reg_581_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln91_1_reg_581_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln91_1_reg_581_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln96_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_reg_589 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_reg_589_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_reg_589_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_reg_589_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_reg_589_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_reg_589_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln92_fu_321_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln91_2_fu_333_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln91_fu_341_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln91_reg_603 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln91_reg_603_pp0_iter2_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln91_reg_603_pp0_iter3_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln91_reg_603_pp0_iter4_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln91_reg_603_pp0_iter5_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln94_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_618 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_618_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_618_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_618_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_618_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_reg_634 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_reg_639 : STD_LOGIC_VECTOR (31 downto 0);
    signal matchedFilter_coeff_M_real_V_load_reg_644 : STD_LOGIC_VECTOR (8 downto 0);
    signal matchedFilter_coeff_M_imag_V_load_reg_649 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1118_fu_404_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln1118_4_fu_407_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln1118_5_fu_410_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln1118_6_fu_413_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_416_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln703_reg_678 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_422_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1193_reg_683 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_428_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln703_1_reg_688 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_434_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_reg_693 : STD_LOGIC_VECTOR (39 downto 0);
    signal p_r_V_reg_698 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_reg_703 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_phi_mux_k_phi_fu_179_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_phi_fu_201_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln95_1_fu_377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_fu_392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_fu_503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_r_M_real_V_2_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_V_3_fu_527_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_V_3_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_V_4_fu_519_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln91_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln90_fu_241_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln92_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln90_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln90_fu_253_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln90_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln91_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln91_fu_287_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln91_1_fu_327_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_9_fu_354_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_fu_347_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln95_fu_361_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln95_fu_365_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln95_1_fu_371_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln91_1_fu_344_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln92_fu_383_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln94_fu_386_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_416_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_416_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_422_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_422_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_428_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_428_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_434_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_434_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_fu_440_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_1_fu_454_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_fu_481_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl2_cast_fu_474_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl3_cast_fu_488_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_26_fu_492_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_27_fu_498_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_r_M_imag_V_fu_514_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_V_fu_509_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_416_ce : STD_LOGIC;
    signal grp_fu_422_ce : STD_LOGIC;
    signal grp_fu_428_ce : STD_LOGIC;
    signal grp_fu_434_ce : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component top_mul_9s_32s_40_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component top_matchedFilter_matchedFilter_coeff_M_real_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component top_matchedFilter_matchedFilter_coeff_M_imag_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    matchedFilter_coeff_M_real_V_U : component top_matchedFilter_matchedFilter_coeff_M_real_V
    generic map (
        DataWidth => 9,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => matchedFilter_coeff_M_real_V_address0,
        ce0 => matchedFilter_coeff_M_real_V_ce0,
        q0 => matchedFilter_coeff_M_real_V_q0);

    matchedFilter_coeff_M_imag_V_U : component top_matchedFilter_matchedFilter_coeff_M_imag_V
    generic map (
        DataWidth => 9,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => matchedFilter_coeff_M_imag_V_address0,
        ce0 => matchedFilter_coeff_M_imag_V_ce0,
        q0 => matchedFilter_coeff_M_imag_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln90_reg_564 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_197 <= select_ln91_1_reg_581;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_197 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln90_fu_235_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten21_reg_164 <= add_ln90_1_fu_229_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten21_reg_164 <= ap_const_lv22_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln90_fu_235_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_186 <= select_ln91_2_fu_333_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_186 <= ap_const_lv18_0;
            end if; 
        end if;
    end process;

    j_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln90_fu_235_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_reg_208 <= add_ln92_fu_321_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_reg_208 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    k_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln90_reg_564 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                k_reg_175 <= select_ln90_1_reg_568;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_reg_175 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    p_r_M_imag_V_3_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln96_reg_589_pp0_iter5_reg = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                p_r_M_imag_V_3_fu_82 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln96_reg_589_pp0_iter5_reg = ap_const_lv1_0))) then 
                p_r_M_imag_V_3_fu_82 <= p_r_M_imag_V_4_fu_519_p3;
            end if; 
        end if;
    end process;

    p_r_M_real_V_2_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln96_reg_589_pp0_iter5_reg = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                p_r_M_real_V_2_fu_78 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln96_reg_589_pp0_iter5_reg = ap_const_lv1_0))) then 
                p_r_M_real_V_2_fu_78 <= p_r_M_real_V_3_fu_527_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln90_reg_564 <= icmp_ln90_fu_235_p2;
                icmp_ln90_reg_564_pp0_iter1_reg <= icmp_ln90_reg_564;
                icmp_ln96_reg_589_pp0_iter1_reg <= icmp_ln96_reg_589;
                select_ln91_1_reg_581_pp0_iter1_reg <= select_ln91_1_reg_581;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln90_reg_564_pp0_iter2_reg <= icmp_ln90_reg_564_pp0_iter1_reg;
                icmp_ln90_reg_564_pp0_iter3_reg <= icmp_ln90_reg_564_pp0_iter2_reg;
                icmp_ln90_reg_564_pp0_iter4_reg <= icmp_ln90_reg_564_pp0_iter3_reg;
                icmp_ln94_reg_618_pp0_iter2_reg <= icmp_ln94_reg_618;
                icmp_ln94_reg_618_pp0_iter3_reg <= icmp_ln94_reg_618_pp0_iter2_reg;
                icmp_ln94_reg_618_pp0_iter4_reg <= icmp_ln94_reg_618_pp0_iter3_reg;
                icmp_ln94_reg_618_pp0_iter5_reg <= icmp_ln94_reg_618_pp0_iter4_reg;
                icmp_ln96_reg_589_pp0_iter2_reg <= icmp_ln96_reg_589_pp0_iter1_reg;
                icmp_ln96_reg_589_pp0_iter3_reg <= icmp_ln96_reg_589_pp0_iter2_reg;
                icmp_ln96_reg_589_pp0_iter4_reg <= icmp_ln96_reg_589_pp0_iter3_reg;
                icmp_ln96_reg_589_pp0_iter5_reg <= icmp_ln96_reg_589_pp0_iter4_reg;
                select_ln91_1_reg_581_pp0_iter2_reg <= select_ln91_1_reg_581_pp0_iter1_reg;
                select_ln91_1_reg_581_pp0_iter3_reg <= select_ln91_1_reg_581_pp0_iter2_reg;
                select_ln91_1_reg_581_pp0_iter4_reg <= select_ln91_1_reg_581_pp0_iter3_reg;
                select_ln91_1_reg_581_pp0_iter5_reg <= select_ln91_1_reg_581_pp0_iter4_reg;
                    zext_ln91_reg_603_pp0_iter2_reg(5 downto 0) <= zext_ln91_reg_603(5 downto 0);
                    zext_ln91_reg_603_pp0_iter3_reg(5 downto 0) <= zext_ln91_reg_603_pp0_iter2_reg(5 downto 0);
                    zext_ln91_reg_603_pp0_iter4_reg(5 downto 0) <= zext_ln91_reg_603_pp0_iter3_reg(5 downto 0);
                    zext_ln91_reg_603_pp0_iter5_reg(5 downto 0) <= zext_ln91_reg_603_pp0_iter4_reg(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln90_reg_564 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln94_reg_618 <= icmp_ln94_fu_398_p2;
                    zext_ln91_reg_603(5 downto 0) <= zext_ln91_fu_341_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln90_fu_235_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln96_reg_589 <= icmp_ln96_fu_315_p2;
                select_ln91_reg_574 <= select_ln91_fu_299_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln90_reg_564_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                matchedFilter_coeff_M_imag_V_load_reg_649 <= matchedFilter_coeff_M_imag_V_q0;
                matchedFilter_coeff_M_real_V_load_reg_644 <= matchedFilter_coeff_M_real_V_q0;
                r_V_3_reg_639 <= a_M_imag_q0;
                r_V_reg_634 <= a_M_real_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln94_reg_618_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln90_reg_564_pp0_iter3_reg = ap_const_lv1_0))) then
                mul_ln1192_reg_693 <= grp_fu_1142_p_dout0;
                mul_ln1193_reg_683 <= grp_fu_748_p_dout0;
                mul_ln703_1_reg_688 <= grp_fu_1138_p_dout0;
                mul_ln703_reg_678 <= grp_fu_739_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln94_reg_618_pp0_iter4_reg = ap_const_lv1_1) and (icmp_ln90_reg_564_pp0_iter4_reg = ap_const_lv1_0))) then
                p_r_V_reg_698 <= ret_V_fu_440_p2(39 downto 8);
                trunc_ln_reg_703 <= ret_V_1_fu_454_p2(39 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln90_fu_235_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln90_1_reg_568 <= select_ln90_1_fu_261_p3;
                select_ln91_1_reg_581 <= select_ln91_1_fu_307_p3;
            end if;
        end if;
    end process;
    zext_ln91_reg_603(13 downto 6) <= "00000000";
    zext_ln91_reg_603_pp0_iter2_reg(13 downto 6) <= "00000000";
    zext_ln91_reg_603_pp0_iter3_reg(13 downto 6) <= "00000000";
    zext_ln91_reg_603_pp0_iter4_reg(13 downto 6) <= "00000000";
    zext_ln91_reg_603_pp0_iter5_reg(13 downto 6) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln90_fu_235_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln90_fu_235_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln90_fu_235_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    a_M_imag_address0 <= zext_ln95_1_fu_377_p1(14 - 1 downto 0);

    a_M_imag_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_M_imag_ce0 <= ap_const_logic_1;
        else 
            a_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_M_real_address0 <= zext_ln95_1_fu_377_p1(14 - 1 downto 0);

    a_M_real_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_M_real_ce0 <= ap_const_logic_1;
        else 
            a_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln90_1_fu_229_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_164) + unsigned(ap_const_lv22_1));
    add_ln90_fu_241_p2 <= std_logic_vector(unsigned(ap_phi_mux_k_phi_fu_179_p4) + unsigned(ap_const_lv6_1));
    add_ln91_1_fu_327_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_186) + unsigned(ap_const_lv18_1));
    add_ln91_fu_287_p2 <= std_logic_vector(unsigned(select_ln90_fu_253_p3) + unsigned(ap_const_lv9_1));
    add_ln92_fu_321_p2 <= std_logic_vector(unsigned(select_ln91_fu_299_p3) + unsigned(ap_const_lv9_1));
    add_ln95_1_fu_371_p2 <= std_logic_vector(unsigned(add_ln95_fu_365_p2) + unsigned(zext_ln91_fu_341_p1));
    add_ln95_fu_365_p2 <= std_logic_vector(unsigned(tmp_8_fu_347_p3) + unsigned(zext_ln95_fu_361_p1));
    and_ln90_fu_281_p2 <= (xor_ln90_fu_269_p2 and icmp_ln92_fu_275_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state9 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln90_fu_235_p2)
    begin
        if ((icmp_ln90_fu_235_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_201_p4_assign_proc : process(i_reg_197, ap_CS_fsm_pp0_stage0, icmp_ln90_reg_564, select_ln91_1_reg_581, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln90_reg_564 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_201_p4 <= select_ln91_1_reg_581;
        else 
            ap_phi_mux_i_phi_fu_201_p4 <= i_reg_197;
        end if; 
    end process;


    ap_phi_mux_k_phi_fu_179_p4_assign_proc : process(k_reg_175, ap_CS_fsm_pp0_stage0, icmp_ln90_reg_564, select_ln90_1_reg_568, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln90_reg_564 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_k_phi_fu_179_p4 <= select_ln90_1_reg_568;
        else 
            ap_phi_mux_k_phi_fu_179_p4 <= k_reg_175;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_26_fu_492_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_474_p3) + unsigned(p_shl3_cast_fu_488_p1));
    empty_27_fu_498_p2 <= std_logic_vector(unsigned(empty_26_fu_492_p2) + unsigned(zext_ln91_reg_603_pp0_iter5_reg));
    grp_fu_1138_p_ce <= ap_const_logic_1;
    grp_fu_1138_p_din0 <= sext_ln1118_5_fu_410_p1(9 - 1 downto 0);
    grp_fu_1138_p_din1 <= sext_ln1118_4_fu_407_p1(32 - 1 downto 0);
    grp_fu_1142_p_ce <= ap_const_logic_1;
    grp_fu_1142_p_din0 <= sext_ln1118_fu_404_p1(9 - 1 downto 0);
    grp_fu_1142_p_din1 <= sext_ln1118_6_fu_413_p1(32 - 1 downto 0);
    grp_fu_416_ce <= ap_const_logic_1;
    grp_fu_416_p0 <= sext_ln1118_fu_404_p1(9 - 1 downto 0);
    grp_fu_416_p1 <= sext_ln1118_4_fu_407_p1(32 - 1 downto 0);
    grp_fu_416_p2 <= grp_fu_739_p_dout0;
    grp_fu_422_ce <= ap_const_logic_1;
    grp_fu_422_p0 <= sext_ln1118_5_fu_410_p1(9 - 1 downto 0);
    grp_fu_422_p1 <= sext_ln1118_6_fu_413_p1(32 - 1 downto 0);
    grp_fu_422_p2 <= grp_fu_748_p_dout0;
    grp_fu_428_ce <= ap_const_logic_1;
    grp_fu_428_p0 <= sext_ln1118_5_fu_410_p1(9 - 1 downto 0);
    grp_fu_428_p1 <= sext_ln1118_4_fu_407_p1(32 - 1 downto 0);
    grp_fu_428_p2 <= grp_fu_1138_p_dout0;
    grp_fu_434_ce <= ap_const_logic_1;
    grp_fu_434_p0 <= sext_ln1118_fu_404_p1(9 - 1 downto 0);
    grp_fu_434_p1 <= sext_ln1118_6_fu_413_p1(32 - 1 downto 0);
    grp_fu_434_p2 <= grp_fu_1142_p_dout0;
    grp_fu_739_p_ce <= ap_const_logic_1;
    grp_fu_739_p_din0 <= sext_ln1118_fu_404_p1(10 - 1 downto 0);
    grp_fu_739_p_din1 <= sext_ln1118_4_fu_407_p1(32 - 1 downto 0);
    grp_fu_748_p_ce <= ap_const_logic_1;
    grp_fu_748_p_din0 <= sext_ln1118_5_fu_410_p1(10 - 1 downto 0);
    grp_fu_748_p_din1 <= sext_ln1118_6_fu_413_p1(32 - 1 downto 0);
    icmp_ln90_fu_235_p2 <= "1" when (indvar_flatten21_reg_164 = ap_const_lv22_3A4CF7) else "0";
    icmp_ln91_fu_247_p2 <= "1" when (indvar_flatten_reg_186 = ap_const_lv18_17EB1) else "0";
    icmp_ln92_fu_275_p2 <= "1" when (j_reg_208 = ap_const_lv9_139) else "0";
    icmp_ln94_fu_398_p2 <= "1" when (unsigned(sub_ln94_fu_386_p2) < unsigned(ap_const_lv10_78)) else "0";
    icmp_ln96_fu_315_p2 <= "1" when (select_ln91_fu_299_p3 = ap_const_lv9_138) else "0";
    matchedFilter_coeff_M_imag_V_address0 <= zext_ln94_fu_392_p1(7 - 1 downto 0);

    matchedFilter_coeff_M_imag_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            matchedFilter_coeff_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            matchedFilter_coeff_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    matchedFilter_coeff_M_real_V_address0 <= zext_ln94_fu_392_p1(7 - 1 downto 0);

    matchedFilter_coeff_M_real_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            matchedFilter_coeff_M_real_V_ce0 <= ap_const_logic_1;
        else 
            matchedFilter_coeff_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln91_fu_293_p2 <= (icmp_ln91_fu_247_p2 or and_ln90_fu_281_p2);
    out_M_imag_address0 <= p_cast_fu_503_p1(14 - 1 downto 0);

    out_M_imag_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            out_M_imag_ce0 <= ap_const_logic_1;
        else 
            out_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_M_imag_d0 <= 
        p_r_M_imag_V_fu_514_p2 when (icmp_ln94_reg_618_pp0_iter5_reg(0) = '1') else 
        p_r_M_imag_V_3_fu_82;

    out_M_imag_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln96_reg_589_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln96_reg_589_pp0_iter5_reg = ap_const_lv1_1))) then 
            out_M_imag_we0 <= ap_const_logic_1;
        else 
            out_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_M_real_address0 <= p_cast_fu_503_p1(14 - 1 downto 0);

    out_M_real_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            out_M_real_ce0 <= ap_const_logic_1;
        else 
            out_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_M_real_d0 <= 
        p_r_M_real_V_fu_509_p2 when (icmp_ln94_reg_618_pp0_iter5_reg(0) = '1') else 
        p_r_M_real_V_2_fu_78;

    out_M_real_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln96_reg_589_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln96_reg_589_pp0_iter5_reg = ap_const_lv1_1))) then 
            out_M_real_we0 <= ap_const_logic_1;
        else 
            out_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_27_fu_498_p2),64));
    p_r_M_imag_V_4_fu_519_p3 <= 
        p_r_M_imag_V_fu_514_p2 when (icmp_ln94_reg_618_pp0_iter5_reg(0) = '1') else 
        p_r_M_imag_V_3_fu_82;
    p_r_M_imag_V_fu_514_p2 <= std_logic_vector(unsigned(trunc_ln_reg_703) + unsigned(p_r_M_imag_V_3_fu_82));
    p_r_M_real_V_3_fu_527_p3 <= 
        p_r_M_real_V_fu_509_p2 when (icmp_ln94_reg_618_pp0_iter5_reg(0) = '1') else 
        p_r_M_real_V_2_fu_78;
    p_r_M_real_V_fu_509_p2 <= std_logic_vector(unsigned(p_r_V_reg_698) + unsigned(p_r_M_real_V_2_fu_78));
    p_shl2_cast_fu_474_p3 <= (select_ln91_1_reg_581_pp0_iter5_reg & ap_const_lv5_0);
    p_shl3_cast_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_481_p3),14));
    ret_V_1_fu_454_p2 <= std_logic_vector(unsigned(mul_ln703_1_reg_688) + unsigned(mul_ln1192_reg_693));
    ret_V_fu_440_p2 <= std_logic_vector(unsigned(mul_ln703_reg_678) - unsigned(mul_ln1193_reg_683));
    select_ln90_1_fu_261_p3 <= 
        add_ln90_fu_241_p2 when (icmp_ln91_fu_247_p2(0) = '1') else 
        ap_phi_mux_k_phi_fu_179_p4;
    select_ln90_fu_253_p3 <= 
        ap_const_lv9_0 when (icmp_ln91_fu_247_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_201_p4;
    select_ln91_1_fu_307_p3 <= 
        add_ln91_fu_287_p2 when (and_ln90_fu_281_p2(0) = '1') else 
        select_ln90_fu_253_p3;
    select_ln91_2_fu_333_p3 <= 
        ap_const_lv18_1 when (icmp_ln91_fu_247_p2(0) = '1') else 
        add_ln91_1_fu_327_p2;
    select_ln91_fu_299_p3 <= 
        ap_const_lv9_0 when (or_ln91_fu_293_p2(0) = '1') else 
        j_reg_208;
        sext_ln1118_4_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_reg_634),40));

        sext_ln1118_5_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(matchedFilter_coeff_M_imag_V_load_reg_649),40));

        sext_ln1118_6_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_3_reg_639),40));

        sext_ln1118_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(matchedFilter_coeff_M_real_V_load_reg_644),40));

    sub_ln94_fu_386_p2 <= std_logic_vector(unsigned(zext_ln91_1_fu_344_p1) - unsigned(zext_ln92_fu_383_p1));
    tmp_8_fu_347_p3 <= (select_ln91_reg_574 & ap_const_lv5_0);
    tmp_9_fu_354_p3 <= (select_ln91_reg_574 & ap_const_lv3_0);
    tmp_fu_481_p3 <= (select_ln91_1_reg_581_pp0_iter5_reg & ap_const_lv3_0);
    xor_ln90_fu_269_p2 <= (icmp_ln91_fu_247_p2 xor ap_const_lv1_1);
    zext_ln91_1_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln91_1_reg_581),10));
    zext_ln91_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln90_1_reg_568),14));
    zext_ln92_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln91_reg_574),10));
    zext_ln94_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln94_fu_386_p2),64));
    zext_ln95_1_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln95_1_fu_371_p2),64));
    zext_ln95_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_354_p3),14));
end behav;
