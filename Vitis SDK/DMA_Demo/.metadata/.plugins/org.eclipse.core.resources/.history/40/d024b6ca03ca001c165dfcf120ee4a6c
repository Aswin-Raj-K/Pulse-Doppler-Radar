//#include "xaxidma.h"
//#include "xparameters.h"
//#include "xil_cache.h"
////#include "xil_types.h"
////#include "xil_io.h"
//#include "stdio.h"
//
//u32 checkHalted(u32 baseAddress, u32 offset){
//	u32 status;
//	status = Xil_In32(baseAddress + offset) & XAXIDMA_HALTED_MASK;
//	return status;
//}
//
//int main(){
//
////	u32 a[] = {1,2,3,4,5,6,7,8};
////	u32 b[8];
////	u32 status;
//	print("Program Started\n");
//	FILE *file = fopen("inp_cpp", "r"); /* should check the result */
//	char line[256];
//
//
//	print("File Reading Started\n");
////	if(file)
////		print("File exist\n");
////	else{
////		print("File does not exist\n");
////		return 0;
////	}
//	while (fgets(line, sizeof(line), file)) {
//		print("Output\n");
//		print(line);
//	}
//	fclose(file);
//	print("File Reading Finished\n");
//
//	return 0;

//	XAxiDma_Config *myDmaConfig;
//	XAxiDma myDma;
//
//	myDmaConfig = XAxiDma_LookupConfigBaseAddr(XPAR_AXI_DMA_0_BASEADDR);
//	status = XAxiDma_CfgInitialize(&myDma, myDmaConfig);
//	if(status!=XST_SUCCESS){
//			print("DMA Initialization Failed..\n");
//			return -1;
//	}
//	print("DMA Initialization Success..\n");
//
//	Xil_DCacheFlushRange((u32)a, 8 * sizeof(u32));
//
//	status = XAxiDma_SimpleTransfer(&myDma,(u32)b, 8 * sizeof(u32),XAXIDMA_DEVICE_TO_DMA);
//
//	status = XAxiDma_SimpleTransfer(&myDma,(u32)a, 8 * sizeof(u32),XAXIDMA_DMA_TO_DEVICE);
//	if(status!=XST_SUCCESS){
//		print("DMA Configure Failed..\n");
//		return -1;
//	}
//	status = checkHalted(XPAR_AXI_DMA_0_BASEADDR,0x4);
//	while(status != 1)
//		status = checkHalted(XPAR_AXI_DMA_0_BASEADDR,0x4);
//
//	status = checkHalted(XPAR_AXI_DMA_0_BASEADDR,0x34);
//	while(status != 1)
//		status = checkHalted(XPAR_AXI_DMA_0_BASEADDR,0x34);
//
////	print("DMA Configure Success..\n");
//	print("DMA Transfer Success..\n");
//	return 0;
//}

#include <stdio.h>

#include "platform.h"

#include "xil_printf.h"

#include "ff.h"

#define TOTAL_SIZE (512*256*16*8)

typedef struct complex {

float real;

float imag;

}cmplx;

int main()

{

FATFS def_drive;

FRESULT rc;

FIL fp1;

UINT bytes_read;

UINT bytesToBeRd = sizeof(cmplx) * TOTAL_SIZE;

//cmplx data_test[10];

cmplx data[TOTAL_SIZE];

init_platform();

print("Hello World\n\r");

if((rc = f_mount(&def_drive,"0:",0)) != FR_OK)

{

print("ERROR : f_mount failed\n\r");

return 0;

}

if((rc = f_open(&fp1,"0:elevOut.bin",FA_OPEN_EXISTING | FA_READ)) != FR_OK)

{

print("ERROR : f_open failed\n\r");

return 0;

}

if((rc = f_read(&fp1,&data[0],bytesToBeRd,&bytes_read)) != FR_OK)

{

print("ERROR : f_read failed\n\r");

return 0;

}

if((rc = f_close(&fp1)) != FR_OK)

{

print("ERROR : f_close failed\n\r");

return 0;

}

cleanup_platform();

return 0;

}




