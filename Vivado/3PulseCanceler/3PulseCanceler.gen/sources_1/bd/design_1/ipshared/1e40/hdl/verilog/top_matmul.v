// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_matmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_M_real_address0,
        a_M_real_ce0,
        a_M_real_q0,
        a_M_imag_address0,
        a_M_imag_ce0,
        a_M_imag_q0,
        out_M_real_address0,
        out_M_real_ce0,
        out_M_real_we0,
        out_M_real_d0,
        out_M_imag_address0,
        out_M_imag_ce0,
        out_M_imag_we0,
        out_M_imag_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state11 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] a_M_real_address0;
output   a_M_real_ce0;
input  [15:0] a_M_real_q0;
output  [13:0] a_M_imag_address0;
output   a_M_imag_ce0;
input  [15:0] a_M_imag_q0;
output  [13:0] out_M_real_address0;
output   out_M_real_ce0;
output   out_M_real_we0;
output  [15:0] out_M_real_d0;
output  [13:0] out_M_imag_address0;
output   out_M_imag_ce0;
output   out_M_imag_we0;
output  [15:0] out_M_imag_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_M_real_ce0;
reg a_M_imag_ce0;
reg out_M_real_ce0;
reg out_M_real_we0;
reg out_M_imag_ce0;
reg out_M_imag_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] coeff_M_real_V_address0;
reg    coeff_M_real_V_ce0;
wire   [9:0] coeff_M_real_V_q0;
reg   [18:0] indvar_flatten19_reg_143;
reg   [11:0] indvar_flatten_reg_154;
reg   [5:0] k_reg_165;
reg   [5:0] j_reg_176;
reg   [8:0] i_reg_187;
reg   [15:0] sum_M_imag_V_reg_198;
reg   [15:0] sum_M_real_V_reg_209;
wire   [18:0] add_ln24_1_fu_220_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln24_fu_226_p2;
reg   [0:0] icmp_ln24_reg_488;
reg   [0:0] icmp_ln24_reg_488_pp0_iter1_reg;
reg   [0:0] icmp_ln24_reg_488_pp0_iter2_reg;
reg   [0:0] icmp_ln24_reg_488_pp0_iter3_reg;
reg   [0:0] icmp_ln24_reg_488_pp0_iter4_reg;
reg   [0:0] icmp_ln24_reg_488_pp0_iter5_reg;
reg   [0:0] icmp_ln24_reg_488_pp0_iter6_reg;
reg   [0:0] icmp_ln24_reg_488_pp0_iter7_reg;
wire   [0:0] icmp_ln25_fu_232_p2;
reg   [0:0] icmp_ln25_reg_492;
reg   [0:0] icmp_ln25_reg_492_pp0_iter1_reg;
wire   [0:0] and_ln24_fu_250_p2;
reg   [0:0] and_ln24_reg_498;
wire   [5:0] select_ln25_fu_262_p3;
reg   [5:0] select_ln25_reg_503;
reg   [5:0] select_ln25_reg_503_pp0_iter1_reg;
reg   [5:0] select_ln25_reg_503_pp0_iter2_reg;
wire   [0:0] icmp_ln31_fu_274_p2;
reg   [0:0] icmp_ln31_reg_514;
reg   [0:0] icmp_ln31_reg_514_pp0_iter1_reg;
reg   [0:0] icmp_ln31_reg_514_pp0_iter2_reg;
reg   [0:0] icmp_ln31_reg_514_pp0_iter3_reg;
reg   [0:0] icmp_ln31_reg_514_pp0_iter4_reg;
reg   [0:0] icmp_ln31_reg_514_pp0_iter5_reg;
reg   [0:0] icmp_ln31_reg_514_pp0_iter6_reg;
reg   [0:0] icmp_ln31_reg_514_pp0_iter7_reg;
wire   [5:0] add_ln26_fu_280_p2;
wire   [11:0] select_ln25_2_fu_292_p3;
wire   [5:0] select_ln25_1_fu_313_p3;
reg   [5:0] select_ln25_1_reg_528;
reg    ap_enable_reg_pp0_iter1;
reg   [5:0] select_ln25_1_reg_528_pp0_iter2_reg;
reg   [5:0] select_ln25_1_reg_528_pp0_iter3_reg;
wire   [0:0] icmp_ln28_fu_320_p2;
reg   [0:0] icmp_ln28_reg_535;
reg   [0:0] icmp_ln28_reg_535_pp0_iter2_reg;
reg   [0:0] icmp_ln28_reg_535_pp0_iter3_reg;
reg   [0:0] icmp_ln28_reg_535_pp0_iter4_reg;
reg   [0:0] icmp_ln28_reg_535_pp0_iter5_reg;
reg   [0:0] icmp_ln28_reg_535_pp0_iter6_reg;
wire   [8:0] select_ln24_1_fu_331_p3;
reg   [8:0] select_ln24_1_reg_541;
reg    ap_enable_reg_pp0_iter2;
wire  signed [23:0] sext_ln1118_fu_391_p1;
wire   [13:0] grp_fu_461_p3;
reg   [13:0] empty_14_reg_594;
reg    ap_enable_reg_pp0_iter5;
reg   [13:0] empty_14_reg_594_pp0_iter6_reg;
reg   [13:0] empty_14_reg_594_pp0_iter7_reg;
wire   [15:0] sum_M_real_V_2_fu_435_p2;
reg   [15:0] sum_M_real_V_2_reg_599;
reg    ap_enable_reg_pp0_iter7;
wire   [15:0] sum_M_imag_V_2_fu_441_p2;
reg   [15:0] sum_M_imag_V_2_reg_605;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter6;
reg    ap_condition_pp0_exit_iter7_state9;
reg    ap_enable_reg_pp0_iter8;
reg   [5:0] ap_phi_mux_j_phi_fu_180_p4;
wire    ap_block_pp0_stage0;
reg   [8:0] ap_phi_mux_i_phi_fu_191_p4;
reg   [15:0] ap_phi_mux_sum_M_imag_V_phi_fu_202_p4;
reg   [15:0] ap_phi_mux_sum_M_real_V_phi_fu_213_p4;
wire   [63:0] zext_ln1118_2_fu_372_p1;
wire   [63:0] zext_ln30_1_fu_382_p1;
wire   [63:0] p_cast12_fu_447_p1;
wire   [0:0] icmp_ln26_fu_244_p2;
wire   [0:0] xor_ln24_fu_238_p2;
wire   [0:0] or_ln25_fu_256_p2;
wire   [11:0] add_ln25_1_fu_286_p2;
wire   [5:0] select_ln24_fu_300_p3;
wire   [5:0] add_ln25_fu_307_p2;
wire   [8:0] add_ln24_fu_325_p2;
wire   [11:0] tmp_3_fu_352_p3;
wire   [13:0] tmp_fu_345_p3;
wire   [13:0] zext_ln30_fu_359_p1;
wire   [10:0] grp_fu_452_p3;
wire   [13:0] add_ln30_fu_363_p2;
wire   [13:0] zext_ln1118_fu_369_p1;
wire   [13:0] add_ln30_1_fu_376_p2;
wire  signed [23:0] grp_fu_469_p2;
wire  signed [23:0] grp_fu_476_p2;
wire   [15:0] p_r_V_fu_417_p4;
wire   [15:0] sum_M_real_V_1_fu_410_p3;
wire   [15:0] trunc_ln_fu_426_p4;
wire   [15:0] sum_M_imag_V_1_fu_403_p3;
wire   [5:0] grp_fu_452_p0;
wire   [6:0] grp_fu_452_p1;
wire   [5:0] grp_fu_452_p2;
wire   [8:0] grp_fu_461_p0;
wire   [6:0] grp_fu_461_p1;
wire   [5:0] grp_fu_461_p2;
wire  signed [9:0] grp_fu_469_p0;
wire  signed [9:0] grp_fu_476_p0;
wire    ap_CS_fsm_state11;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [10:0] grp_fu_452_p00;
wire   [10:0] grp_fu_452_p20;
wire   [13:0] grp_fu_461_p00;
wire   [13:0] grp_fu_461_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
end

top_matmul_coeff_M_real_V #(
    .DataWidth( 10 ),
    .AddressRange( 1560 ),
    .AddressWidth( 11 ))
coeff_M_real_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(coeff_M_real_V_address0),
    .ce0(coeff_M_real_V_ce0),
    .q0(coeff_M_real_V_q0)
);

top_mac_muladd_6ns_7ns_6ns_11_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 11 ))
mac_muladd_6ns_7ns_6ns_11_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_452_p0),
    .din1(grp_fu_452_p1),
    .din2(grp_fu_452_p2),
    .ce(1'b1),
    .dout(grp_fu_452_p3)
);

top_mac_muladd_9ns_7ns_6ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 14 ))
mac_muladd_9ns_7ns_6ns_14_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_461_p0),
    .din1(grp_fu_461_p1),
    .din2(grp_fu_461_p2),
    .ce(1'b1),
    .dout(grp_fu_461_p3)
);

top_mul_mul_10s_16s_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
mul_mul_10s_16s_24_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_469_p0),
    .din1(a_M_real_q0),
    .ce(1'b1),
    .dout(grp_fu_469_p2)
);

top_mul_mul_10s_16s_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
mul_mul_10s_16s_24_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_476_p0),
    .din1(a_M_imag_q0),
    .ce(1'b1),
    .dout(grp_fu_476_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter7_state9)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter7_state9))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter6;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_488_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        i_reg_187 <= select_ln24_1_reg_541;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_187 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_226_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten19_reg_143 <= add_ln24_1_fu_220_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten19_reg_143 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_226_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_154 <= select_ln25_2_fu_292_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_154 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_488_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        j_reg_176 <= select_ln25_1_reg_528;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_176 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_226_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_reg_165 <= add_ln26_fu_280_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_165 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln24_reg_488_pp0_iter7_reg == 1'd0))) begin
        sum_M_imag_V_reg_198 <= sum_M_imag_V_2_reg_605;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sum_M_imag_V_reg_198 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln24_reg_488_pp0_iter7_reg == 1'd0))) begin
        sum_M_real_V_reg_209 <= sum_M_real_V_2_reg_599;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sum_M_real_V_reg_209 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_226_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln24_reg_498 <= and_ln24_fu_250_p2;
        icmp_ln25_reg_492 <= icmp_ln25_fu_232_p2;
        icmp_ln31_reg_514 <= icmp_ln31_fu_274_p2;
        select_ln25_reg_503 <= select_ln25_fu_262_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln24_reg_488_pp0_iter4_reg == 1'd0))) begin
        empty_14_reg_594 <= grp_fu_461_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        empty_14_reg_594_pp0_iter6_reg <= empty_14_reg_594;
        empty_14_reg_594_pp0_iter7_reg <= empty_14_reg_594_pp0_iter6_reg;
        icmp_ln24_reg_488_pp0_iter2_reg <= icmp_ln24_reg_488_pp0_iter1_reg;
        icmp_ln24_reg_488_pp0_iter3_reg <= icmp_ln24_reg_488_pp0_iter2_reg;
        icmp_ln24_reg_488_pp0_iter4_reg <= icmp_ln24_reg_488_pp0_iter3_reg;
        icmp_ln24_reg_488_pp0_iter5_reg <= icmp_ln24_reg_488_pp0_iter4_reg;
        icmp_ln24_reg_488_pp0_iter6_reg <= icmp_ln24_reg_488_pp0_iter5_reg;
        icmp_ln24_reg_488_pp0_iter7_reg <= icmp_ln24_reg_488_pp0_iter6_reg;
        icmp_ln28_reg_535_pp0_iter2_reg <= icmp_ln28_reg_535;
        icmp_ln28_reg_535_pp0_iter3_reg <= icmp_ln28_reg_535_pp0_iter2_reg;
        icmp_ln28_reg_535_pp0_iter4_reg <= icmp_ln28_reg_535_pp0_iter3_reg;
        icmp_ln28_reg_535_pp0_iter5_reg <= icmp_ln28_reg_535_pp0_iter4_reg;
        icmp_ln28_reg_535_pp0_iter6_reg <= icmp_ln28_reg_535_pp0_iter5_reg;
        icmp_ln31_reg_514_pp0_iter2_reg <= icmp_ln31_reg_514_pp0_iter1_reg;
        icmp_ln31_reg_514_pp0_iter3_reg <= icmp_ln31_reg_514_pp0_iter2_reg;
        icmp_ln31_reg_514_pp0_iter4_reg <= icmp_ln31_reg_514_pp0_iter3_reg;
        icmp_ln31_reg_514_pp0_iter5_reg <= icmp_ln31_reg_514_pp0_iter4_reg;
        icmp_ln31_reg_514_pp0_iter6_reg <= icmp_ln31_reg_514_pp0_iter5_reg;
        icmp_ln31_reg_514_pp0_iter7_reg <= icmp_ln31_reg_514_pp0_iter6_reg;
        select_ln25_1_reg_528_pp0_iter2_reg <= select_ln25_1_reg_528;
        select_ln25_1_reg_528_pp0_iter3_reg <= select_ln25_1_reg_528_pp0_iter2_reg;
        select_ln25_reg_503_pp0_iter2_reg <= select_ln25_reg_503_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln24_reg_488 <= icmp_ln24_fu_226_p2;
        icmp_ln24_reg_488_pp0_iter1_reg <= icmp_ln24_reg_488;
        icmp_ln25_reg_492_pp0_iter1_reg <= icmp_ln25_reg_492;
        icmp_ln31_reg_514_pp0_iter1_reg <= icmp_ln31_reg_514;
        select_ln25_reg_503_pp0_iter1_reg <= select_ln25_reg_503;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_488 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln28_reg_535 <= icmp_ln28_fu_320_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_488_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        select_ln24_1_reg_541 <= select_ln24_1_fu_331_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_488 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        select_ln25_1_reg_528 <= select_ln25_1_fu_313_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln24_reg_488_pp0_iter6_reg == 1'd0))) begin
        sum_M_imag_V_2_reg_605 <= sum_M_imag_V_2_fu_441_p2;
        sum_M_real_V_2_reg_599 <= sum_M_real_V_2_fu_435_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        a_M_imag_ce0 = 1'b1;
    end else begin
        a_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        a_M_real_ce0 = 1'b1;
    end else begin
        a_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        ap_condition_pp0_exit_iter7_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter7_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_fu_226_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_488_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_191_p4 = select_ln24_1_reg_541;
    end else begin
        ap_phi_mux_i_phi_fu_191_p4 = i_reg_187;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_488_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_j_phi_fu_180_p4 = select_ln25_1_reg_528;
    end else begin
        ap_phi_mux_j_phi_fu_180_p4 = j_reg_176;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln24_reg_488_pp0_iter7_reg == 1'd0))) begin
        ap_phi_mux_sum_M_imag_V_phi_fu_202_p4 = sum_M_imag_V_2_reg_605;
    end else begin
        ap_phi_mux_sum_M_imag_V_phi_fu_202_p4 = sum_M_imag_V_reg_198;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln24_reg_488_pp0_iter7_reg == 1'd0))) begin
        ap_phi_mux_sum_M_real_V_phi_fu_213_p4 = sum_M_real_V_2_reg_599;
    end else begin
        ap_phi_mux_sum_M_real_V_phi_fu_213_p4 = sum_M_real_V_reg_209;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        coeff_M_real_V_ce0 = 1'b1;
    end else begin
        coeff_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        out_M_imag_ce0 = 1'b1;
    end else begin
        out_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln31_reg_514_pp0_iter7_reg == 1'd1))) begin
        out_M_imag_we0 = 1'b1;
    end else begin
        out_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        out_M_real_ce0 = 1'b1;
    end else begin
        out_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln31_reg_514_pp0_iter7_reg == 1'd1))) begin
        out_M_real_we0 = 1'b1;
    end else begin
        out_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_M_imag_address0 = zext_ln30_1_fu_382_p1;

assign a_M_real_address0 = zext_ln30_1_fu_382_p1;

assign add_ln24_1_fu_220_p2 = (indvar_flatten19_reg_143 + 19'd1);

assign add_ln24_fu_325_p2 = (ap_phi_mux_i_phi_fu_191_p4 + 9'd1);

assign add_ln25_1_fu_286_p2 = (indvar_flatten_reg_154 + 12'd1);

assign add_ln25_fu_307_p2 = (select_ln24_fu_300_p3 + 6'd1);

assign add_ln26_fu_280_p2 = (select_ln25_fu_262_p3 + 6'd1);

assign add_ln30_1_fu_376_p2 = (add_ln30_fu_363_p2 + zext_ln1118_fu_369_p1);

assign add_ln30_fu_363_p2 = (tmp_fu_345_p3 + zext_ln30_fu_359_p1);

assign and_ln24_fu_250_p2 = (xor_ln24_fu_238_p2 & icmp_ln26_fu_244_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign coeff_M_real_V_address0 = zext_ln1118_2_fu_372_p1;

assign grp_fu_452_p0 = grp_fu_452_p00;

assign grp_fu_452_p00 = select_ln25_fu_262_p3;

assign grp_fu_452_p1 = 11'd39;

assign grp_fu_452_p2 = grp_fu_452_p20;

assign grp_fu_452_p20 = select_ln25_1_reg_528;

assign grp_fu_461_p0 = grp_fu_461_p00;

assign grp_fu_461_p00 = select_ln24_1_fu_331_p3;

assign grp_fu_461_p1 = 14'd39;

assign grp_fu_461_p2 = grp_fu_461_p20;

assign grp_fu_461_p20 = select_ln25_1_reg_528_pp0_iter3_reg;

assign grp_fu_469_p0 = sext_ln1118_fu_391_p1;

assign grp_fu_476_p0 = sext_ln1118_fu_391_p1;

assign icmp_ln24_fu_226_p2 = ((indvar_flatten19_reg_143 == 19'd488280) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_232_p2 = ((indvar_flatten_reg_154 == 12'd1560) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_244_p2 = ((k_reg_165 == 6'd40) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_320_p2 = ((select_ln25_reg_503 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_274_p2 = ((select_ln25_fu_262_p3 == 6'd39) ? 1'b1 : 1'b0);

assign or_ln25_fu_256_p2 = (icmp_ln25_fu_232_p2 | and_ln24_fu_250_p2);

assign out_M_imag_address0 = p_cast12_fu_447_p1;

assign out_M_imag_d0 = sum_M_imag_V_2_reg_605;

assign out_M_real_address0 = p_cast12_fu_447_p1;

assign out_M_real_d0 = sum_M_real_V_2_reg_599;

assign p_cast12_fu_447_p1 = empty_14_reg_594_pp0_iter7_reg;

assign p_r_V_fu_417_p4 = {{grp_fu_469_p2[23:8]}};

assign select_ln24_1_fu_331_p3 = ((icmp_ln25_reg_492_pp0_iter1_reg[0:0] == 1'b1) ? add_ln24_fu_325_p2 : ap_phi_mux_i_phi_fu_191_p4);

assign select_ln24_fu_300_p3 = ((icmp_ln25_reg_492[0:0] == 1'b1) ? 6'd0 : ap_phi_mux_j_phi_fu_180_p4);

assign select_ln25_1_fu_313_p3 = ((and_ln24_reg_498[0:0] == 1'b1) ? add_ln25_fu_307_p2 : select_ln24_fu_300_p3);

assign select_ln25_2_fu_292_p3 = ((icmp_ln25_fu_232_p2[0:0] == 1'b1) ? 12'd1 : add_ln25_1_fu_286_p2);

assign select_ln25_fu_262_p3 = ((or_ln25_fu_256_p2[0:0] == 1'b1) ? 6'd0 : k_reg_165);

assign sext_ln1118_fu_391_p1 = $signed(coeff_M_real_V_q0);

assign sum_M_imag_V_1_fu_403_p3 = ((icmp_ln28_reg_535_pp0_iter6_reg[0:0] == 1'b1) ? 16'd0 : ap_phi_mux_sum_M_imag_V_phi_fu_202_p4);

assign sum_M_imag_V_2_fu_441_p2 = (trunc_ln_fu_426_p4 + sum_M_imag_V_1_fu_403_p3);

assign sum_M_real_V_1_fu_410_p3 = ((icmp_ln28_reg_535_pp0_iter6_reg[0:0] == 1'b1) ? 16'd0 : ap_phi_mux_sum_M_real_V_phi_fu_213_p4);

assign sum_M_real_V_2_fu_435_p2 = (p_r_V_fu_417_p4 + sum_M_real_V_1_fu_410_p3);

assign tmp_3_fu_352_p3 = {{select_ln24_1_reg_541}, {3'd0}};

assign tmp_fu_345_p3 = {{select_ln24_1_reg_541}, {5'd0}};

assign trunc_ln_fu_426_p4 = {{grp_fu_476_p2[23:8]}};

assign xor_ln24_fu_238_p2 = (icmp_ln25_fu_232_p2 ^ 1'd1);

assign zext_ln1118_2_fu_372_p1 = grp_fu_452_p3;

assign zext_ln1118_fu_369_p1 = select_ln25_reg_503_pp0_iter2_reg;

assign zext_ln30_1_fu_382_p1 = add_ln30_1_fu_376_p2;

assign zext_ln30_fu_359_p1 = tmp_3_fu_352_p3;

endmodule //top_matmul
